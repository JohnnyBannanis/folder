> install.packages("curl", dependencies = TRUE)
Installing package into ‘C:/Users/Juan Maldonado/Documents/R/win-library/3.4’
(as ‘lib’ is unspecified)
also installing the dependencies ‘commonmark’, ‘xml2’, ‘hunspell’, ‘praise’, ‘R6’, ‘withr’, ‘promises’, ‘later’, ‘BH’, ‘spelling’, ‘testthat’, ‘httpuv’, ‘webutils’

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/commonmark_1.5.zip'
Content type 'application/zip' length 271765 bytes (265 KB)
downloaded 265 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/xml2_1.2.0.zip'
Content type 'application/zip' length 3532394 bytes (3.4 MB)
downloaded 3.4 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/hunspell_2.9.zip'
Content type 'application/zip' length 1734686 bytes (1.7 MB)
downloaded 1.7 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/praise_1.0.0.zip'
Content type 'application/zip' length 17946 bytes (17 KB)
downloaded 17 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/R6_2.2.2.zip'
Content type 'application/zip' length 316700 bytes (309 KB)
downloaded 309 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/withr_2.1.2.zip'
Content type 'application/zip' length 123707 bytes (120 KB)
downloaded 120 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/promises_1.0.1.zip'
Content type 'application/zip' length 647004 bytes (631 KB)
downloaded 631 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/later_0.7.3.zip'
Content type 'application/zip' length 606340 bytes (592 KB)
downloaded 592 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/BH_1.66.0-1.zip'
Content type 'application/zip' length 17880018 bytes (17.1 MB)
downloaded 17.1 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/spelling_1.1.zip'
Content type 'application/zip' length 29484 bytes (28 KB)
downloaded 28 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/testthat_2.0.0.zip'
Content type 'application/zip' length 1196876 bytes (1.1 MB)
downloaded 1.1 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/httpuv_1.4.4.1.zip'
Content type 'application/zip' length 1128775 bytes (1.1 MB)
downloaded 1.1 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/webutils_0.6.zip'
Content type 'application/zip' length 39753 bytes (38 KB)
downloaded 38 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/curl_3.2.zip'
Content type 'application/zip' length 2965634 bytes (2.8 MB)
downloaded 2.8 MB

package ‘commonmark’ successfully unpacked and MD5 sums checked
package ‘xml2’ successfully unpacked and MD5 sums checked
package ‘hunspell’ successfully unpacked and MD5 sums checked
package ‘praise’ successfully unpacked and MD5 sums checked
package ‘R6’ successfully unpacked and MD5 sums checked
package ‘withr’ successfully unpacked and MD5 sums checked
package ‘promises’ successfully unpacked and MD5 sums checked
package ‘later’ successfully unpacked and MD5 sums checked
package ‘BH’ successfully unpacked and MD5 sums checked
package ‘spelling’ successfully unpacked and MD5 sums checked
package ‘testthat’ successfully unpacked and MD5 sums checked
package ‘httpuv’ successfully unpacked and MD5 sums checked
package ‘webutils’ successfully unpacked and MD5 sums checked
package ‘curl’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\Juan Maldonado\AppData\Local\Temp\Rtmp4kWywa\downloaded_packages
> install.packages("httr", dependencies = TRUE)
Installing package into ‘C:/Users/Juan Maldonado/Documents/R/win-library/3.4’
(as ‘lib’ is unspecified)
also installing the dependencies ‘pkgconfig’, ‘lazyeval’, ‘hms’, ‘rex’, ‘openssl’, ‘jpeg’, ‘png’, ‘readr’, ‘covr’

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/pkgconfig_2.0.1.zip'
Content type 'application/zip' length 20025 bytes (19 KB)
downloaded 19 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/lazyeval_0.2.1.zip'
Content type 'application/zip' length 140205 bytes (136 KB)
downloaded 136 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/hms_0.4.2.zip'
Content type 'application/zip' length 33939 bytes (33 KB)
downloaded 33 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/rex_1.1.2.zip'
Content type 'application/zip' length 102179 bytes (99 KB)
downloaded 99 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/openssl_1.0.1.zip'
Content type 'application/zip' length 3572670 bytes (3.4 MB)
downloaded 3.4 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/jpeg_0.1-8.zip'
Content type 'application/zip' length 229358 bytes (223 KB)
downloaded 223 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/png_0.1-7.zip'
Content type 'application/zip' length 291037 bytes (284 KB)
downloaded 284 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/readr_1.1.1.zip'
Content type 'application/zip' length 1254668 bytes (1.2 MB)
downloaded 1.2 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/covr_3.1.0.zip'
Content type 'application/zip' length 127584 bytes (124 KB)
downloaded 124 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/httr_1.3.1.zip'
Content type 'application/zip' length 302162 bytes (295 KB)
downloaded 295 KB

package ‘pkgconfig’ successfully unpacked and MD5 sums checked
package ‘lazyeval’ successfully unpacked and MD5 sums checked
package ‘hms’ successfully unpacked and MD5 sums checked
package ‘rex’ successfully unpacked and MD5 sums checked
package ‘openssl’ successfully unpacked and MD5 sums checked
package ‘jpeg’ successfully unpacked and MD5 sums checked
package ‘png’ successfully unpacked and MD5 sums checked
package ‘readr’ successfully unpacked and MD5 sums checked
package ‘covr’ successfully unpacked and MD5 sums checked
package ‘httr’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\Juan Maldonado\AppData\Local\Temp\Rtmp4kWywa\downloaded_packages
> install.packages("swirl", dependencies = TRUE)
Installing package into ‘C:/Users/Juan Maldonado/Documents/R/win-library/3.4’
(as ‘lib’ is unspecified)
also installing the dependency ‘RCurl’

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/RCurl_1.95-4.10.zip'
Content type 'application/zip' length 2871260 bytes (2.7 MB)
downloaded 2.7 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/swirl_2.4.3.zip'
Content type 'application/zip' length 236974 bytes (231 KB)
downloaded 231 KB

package ‘RCurl’ successfully unpacked and MD5 sums checked
package ‘swirl’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\Juan Maldonado\AppData\Local\Temp\Rtmp4kWywa\downloaded_packages
> library("swirl")

| Hi! Type swirl() when you are ready to begin.

Warning message:
package ‘swirl’ was built under R version 3.4.4
> select_language()

 1: chinese_simplified
 2: dutch
 3: english
 4: french
 5: german
 6: german_formal
 7: korean
 8: portuguese
 9: spanish
10: turkish

Selection: 9
> install_course_github("ifunam", "programacion-estadistica-r")
Downloading: 2.5 MB
> swirl()

| ¡Bienvenido a swirl! Por favor, inicia sesión. Si ya has estado
| aquí antes, ingresa el mismo nombre de usuario que usaste la
| última vez. Si es tu primera vez aquí, elige un nombre corto
| (cada vez que arranques swirl, tendrás que ingresar este nombre).

¿Cómo debo de referirme a ti? maldojota

| Gracias, maldojota. Permíteme explicarte algunos puntos antes de que
| empieces tu primera lección. Primero, siempre que veas '...', significa
| que debes teclear Enter cuando hayas terminado de leer y estés listo para
| continuar.

... <-- Ésta es la señal para presionar Enter y continuar

| También, cuando veas 'RESPUESTA:', el indicador de R (>), o cuando se te
| pide escoger una opción de un listado, significa que es tu turno de
| escribir e ingresar una respuesta, y teclear Enter para continuar.

Selecciona 1, 2 ó 3, y presiona Enter

1: Continuar.
2: Avanzar.
3: ¡Continuemos!

Selection: 3

| Puedes salir de swirl y volver a la línea de comandos de R (>) en
| cualquier momento pulsando la tecla Esc. Si ya te encuentras en la línea
| de comandos, teclea bye() para salir para salir y guardar tu progreso.
| Cuando salgas correctamente, verás un mensaje corto que te hará saberlo.

| Cuando estés en el indicador de R (>):
| -- Teclear skip() te permite saltar la pregunta actual.
| -- Teclear play() swirl te deja experimentar con R; swirl no hará caso de
| lo que teclees...
| -- HASTA que ingreses nxt(), vas a recuperar la atención de swirl.
| -- Al teclear bye() swirl terminará. Tu progreso se guardará.
| -- Al teclear main() te regresa al menú principal de swirl.
| -- Teclear info() muestra estas opciones de nuevo.

| ¡Empecemos!


////////////////////////////////////////////////////////////////////////////////

...

| Por favor escoge un curso o teclea 0 para salir de swirl.

1: programacion-estadistica-r
2: ¡Llévame al depósito de cursos swirl!

Selection: 1

| Selecciona una lección por favor, o teclea 0 para volver al menú del
| curso.

 1: Obtener Ayuda
 2: Objetos Tipos de Datos y Operaciones Basicas
 3: Subconjuntos de Datos
 4: Leer y escribir Datos
 5: Funciones
 6: Funciones apply
 7: Graficacion
 8: Parametros en el Sistema de Graficos
 9: Colores en el Sistema de Graficos
10: Graficacion con texto y notacion matematica
11: Creacion de Graficas en 3D
12: Expresiones regulares
13: Graficacion con ggplot2
14: Simulacion

Selection: 1
  |                                                                   |   0%

| En esta lección conocerás las principales herramientas que R tiene para
| obtener ayuda.

...

  |====                                                               |   6%
| La primera herramienta que puedes usar para obtener ayuda es help.start().
| En ella encontrarás un menú de recursos, entre los cuales se encuentran
| manuales, referencias y demás material para comenzar a aprender R.

...

  |========                                                           |  12%
| Para usar help.start() escribe en la línea de comandos help.start().
| Pruébalo ahora:

> help.start()
If nothing happens, you should open
‘http://127.0.0.1:15354/doc/html/index.html’ yourself

| ¡Acertaste!

  |============                                                       |  18%
| R incluye un sistema de ayuda que te facilita obtener información acerca
| de las funciones de los paquetes instalados. Para obtener información
| acerca de una función, por ejemplo de la función print(), debes escribir
| ?print en la línea de comandos.

...?print

  |================                                                   |  24%
| Ahora es tu turno, introduce ?print en la línea de comandos.

> ?print

| ¡Sigue trabajando de esa manera y llegarás lejos!

  |====================                                               |  29%
| Como puedes observar ? te muestra en la ventana Help una breve descripción
| de la función, de cómo usarla, así como sus argumentos, etcétera.

...

  |========================                                           |  35%
| Asimismo, puedes usar la función help(), la cual es un equivalente de ?.
| Al utilizar help(), usarás como argumento el nombre de la función entre
| comillas, por ejemplo, help("print").

...

  |============================                                       |  41%
| Para buscar ayuda sobre un operador, éste tiene que encontrarse entre
| comillas inversas. Por ejemplo, si buscas información del operador +,
| deberás escribir help(`+`) o ?`+` en la línea de comandos.

...

  |================================                                   |  47%
| Otra herramienta disponible es la función apropos(), la cual recibe una
| cadena entre comillas como argumento y te muestra una lista de todas las
| funciones que contengan esa cadena. Inténtalo: escribe apropos("class") en
| la línea de comandos.

>
> apropos("class")
 [1] ".checkMFClasses"                ".classEnv"
 [3] ".MFclass"                       ".OldClassesList"
 [5] ".rs.getR6ClassGeneratorMethod"  ".rs.getR6ClassSymbols"
 [7] ".rs.getSetRefClassSymbols"      ".rs.getSingleClass"
 [9] ".rs.objectClass"                ".rs.rnb.engineToCodeClass"
[11] ".rs.rpc.get_set_class_slots"    ".rs.rpc.get_set_ref_class_call"
[13] ".selectSuperClasses"            ".valueClassTest"
[15] "all.equal.envRefClass"          "assignClassDef"
[17] "class"                          "class<-"
[19] "classesToAM"                    "classLabel"
[21] "classMetaName"                  "className"
[23] "completeClassDefinition"        "completeSubclasses"
[25] "data.class"                     "findClass"
[27] "getAllSuperClasses"             "getClass"
[29] "getClassDef"                    "getClasses"
[31] "getClassName"                   "getClassPackage"
[33] "getRefClass"                    "getSubclasses"
[35] "insertClassMethods"             "isClass"
[37] "isClassDef"                     "isClassUnion"
[39] "isSealedClass"                  "isVirtualClass"
[41] "isXS3Class"                     "makeClassRepresentation"
[43] "makePrototypeFromClassDef"      "multipleClasses"
[45] "namespaceImportClasses"         "nclass.FD"
[47] "nclass.scott"                   "nclass.Sturges"
[49] "newClassRepresentation"         "oldClass"
[51] "oldClass<-"                     "promptClass"
[53] "removeClass"                    "resetClass"
[55] "S3Class"                        "S3Class<-"
[57] "sealClass"                      "selectSuperClasses"
[59] "setClass"                       "setClassUnion"
[61] "setOldClass"                    "setRefClass"
[63] "showClass"                      "superClassDepth"
[65] "unclass"

| ¡Traes una muy buena racha!

  |===================================                                |  53%
| También puedes obtener ejemplos del uso de funciones con la función
| example(). Por ejemplo, escribe example("read.table").

> example("read.table")

rd.tbl> ## using count.fields to handle unknown maximum number of fields
rd.tbl> ## when fill = TRUE
rd.tbl> test1 <- c(1:5, "6,7", "8,9,10")

rd.tbl> tf <- tempfile()

rd.tbl> writeLines(test1, tf)

rd.tbl> read.csv(tf, fill = TRUE) # 1 column
  X1
1  2
2  3
3  4
4  5
5  6
6  7
7  8
8  9
9 10

rd.tbl> ncol <- max(count.fields(tf, sep = ","))

rd.tbl> read.csv(tf, fill = TRUE, header = FALSE,
rd.tbl+          col.names = paste0("V", seq_len(ncol)))
  V1 V2 V3
1  1 NA NA
2  2 NA NA
3  3 NA NA
4  4 NA NA
5  5 NA NA
6  6  7 NA
7  8  9 10

rd.tbl> unlink(tf)

rd.tbl> ## "Inline" data set, using text=
rd.tbl> ## Notice that leading and trailing empty lines are auto-trimmed
rd.tbl>
rd.tbl> read.table(header = TRUE, text = "
rd.tbl+ a b
rd.tbl+ 1 2
rd.tbl+ 3 4
rd.tbl+ ")
  a b
1 1 2
2 3 4

| ¡Mantén este buen nivel!

  |=======================================                            |  59%
| Con eso tendrás una idea de lo que puedes hacer con esta función.

...

  |===========================================                        |  65%
| R te permite buscar información sobre un tema usando ??. Por ejemplo,
| escribe ??regression en la línea de comandos.

> ??regression

| ¡Traes una muy buena racha!

  |===============================================                    |  71%
| Esta herramienta es muy útil si no recuerdas el nombre de una función, ya
| que R te mostrará una lista de temas relevantes en la venta Help.
| Análogamente, puedes usar la función help.search("regression").

...

  |===================================================                |  76%
| Otra manera de obtener información de ayuda sobre un paquete es usar la
| opción help para el comando library, con lo cual tendrás información más
| completa. Un ejemplo es library(help="stats").

...

  |=======================================================            |  82%
| Algunos paquetes incluyen viñetas. Una viñeta es un documento corto que
| describe cómo se usa un paquete. Puedes ver una viñetas usando la función
| vignette(). Pruébalo: escribe vignette("tests") en la línea de comandos.

> vignette("tests")

| ¡Tu dedicación es inspiradora!

  |===========================================================        |  88%
| Por último si deseas ver la lista de viñetas disponibles puedes hacerlo
| usando el comando vignette() con los paréntesis vacíos.

...

  |===============================================================    |  94%
| Es MUY IMPORTANTE que sepas que durante todo el curso en swirl, puedes
| hacer uso de las funciones help() o ? cuando lo desees, incluso si estas
| en medio de una lección.

...

  |===================================================================| 100%
| Has concluido la lección. ¿Te gustaría que se le notificará a Coursera que
| has completado esta lección?

1: No
2: Si

Selection: 2
Â¿CÃºal es tu nombre de usuario registrado en Coursera (email)? maldo.jota@gmail.com
Â¿CÃºal es tu token de la tarea? TatVqYnekhYCazx3
Â¡El envÃ­o de la calificaciÃ³n fue satisfactorio!

| ¡Tu dedicación es inspiradora!

| ¡Has alcanzado el fin de esta lección! Volviendo al menú principal...


////////////////////////////////////////////////////////////////////////////////

| Por favor escoge un curso o teclea 0 para salir de swirl.

1: programacion-estadistica-r
2: ¡Llévame al depósito de cursos swirl!

Selection: 1

| Selecciona una lección por favor, o teclea 0 para volver al menú del
| curso.

 1: Obtener Ayuda
 2: Objetos Tipos de Datos y Operaciones Basicas
 3: Subconjuntos de Datos
 4: Leer y escribir Datos
 5: Funciones
 6: Funciones apply
 7: Graficacion
 8: Parametros en el Sistema de Graficos
 9: Colores en el Sistema de Graficos
10: Graficacion con texto y notacion matematica
11: Creacion de Graficas en 3D
12: Expresiones regulares
13: Graficacion con ggplot2
14: Simulacion

Selection: 2
  |                                                                   |   0%

| En esta lección conocerás los tipos de datos que existen en el lenguaje R,
| además de las operaciones básicas que puedes hacer con ellos.

...

  |=                                                                  |   1%
| Cuando introduces una expresión en la línea de comandos y das ENTER, R
| evalúa la expresión y muestra el resultado (si es que existe uno). R puede
| ser usado como una calculadora, ya que realiza operaciones aritméticas,
| además de operaciones lógicas.

...

  |==                                                                 |   2%
| Pruébalo: ingresa 3 + 7 en la línea de comandos.

> 3+7
[1] 10

| ¡Bien hecho!

  |==                                                                 |   3%
| R simplemente imprime el resultado 10 por defecto. Sin embargo, R es un
| lenguaje de programación y normalmente la razón por la que usas éstos es
| para automatizar algún proceso y evitar la repetición innecesaria.

...

  |===                                                                |   4%
| En ese caso, tal vez quieras usar el resultado anterior en algún otro
| cálculo. Así que en lugar de volver a teclear la expresión cada vez que la
| necesites, puedes crear una variable que guarde el resultado de ésta.

...

  |====                                                               |   6%
| La manera de asignar un valor a una variable en R es usar el operador de
| asignación, el cual es sólo un símbolo de menor que seguido de un signo de
| menos, mejor conocido como guion alto. El operador se ve así: <-

...

  |=====                                                              |   7%
| Por ejemplo, ahora ingresa en la línea de comandos: mi_variable <- (180 /
| 6) - 15

> mi_variable <- (180 /6) - 15

| ¡Eso es correcto!

  |=====                                                              |   8%
| Lo que estás haciendo en este caso es asignarle a la variable mi_variable
| el valor de todo lo que se encuentra del lado derecho del operador de
| asignación, en este caso (180 / 6) - 15.

...

  |======                                                             |   9%
| En R también puedes asignar del lado izquierdo: (180 / 6) - 15 ->
| mi_variable

...

  |=======                                                            |  10%
| Como ya te habrás dado cuenta, la asignación '<-' no muestra ningún
| resultado. Antes de ver el contenido de la variable 'mi_variable', ¿qué
| crees que contenga la variable ‘mi_variable’?.

1: la expresión evaluada, es decir un 15
2: la dirección de memoria de la variable 'mi_variable'
3: la expresión (180 /  6) - 15

Selection: 1

| ¡Buen trabajo!

  |========                                                           |  11%
| La variable 'mi_variable' deberá contener el número 15, debido a que (180
| / 6) - 15 = 15. Para revisar el contenido de una variable, basta con
| escribir el nombre de ésta en la línea de comandos y presionar ENTER.
| Inténtalo: muestra el contenido de la variable 'mi_variable':

> mi_variable
[1] 15

| ¡Bien hecho!

  |========                                                           |  12%
| Nota que el '[1]' acompaña a los valores mostrados al evaluar las
| expresiones anteriores. Esto se debe a que en R todo número que introduces
| en la consola es interpretado como un vector.

...

  |=========                                                          |  13%
| Un vector es una colección ordenada de números, por lo cual el '[1]'
| denota la posición del primer elemento mostrado en el renglón 1. En los
| casos anteriores sólo existe un único elemento en el vector.

...

  |==========                                                         |  15%
| En R puedes construir vectores más largos usando la función c() (combine).
| Por ejemplo, introduce: y <- c(561, 1105, 1729, 2465, 2821)

>
> y <- c(561, 1105, 1729, 2465, 2821)

| ¡Es asombroso!

  |===========                                                        |  16%
| Ahora observa el contenido de la variable 'y'. Otra manera de ver el
| contenido de una variable es imprimirlo con la función print(). Introduce
| print(y) en la línea de comandos:

> print(y)
[1]  561 1105 1729 2465 2821

| ¡Bien hecho!

  |===========                                                        |  17%
| Como puedes notar, la expresión anterior resulta ser un vector que
| contiene los primeros cinco números de Carmichael. Como ejemplo de un
| vector que abarque más de una línea, usa el operador de secuencia para
| producir un vector con cada uno de los enteros del 1 al 100. Introduce
| 1:100 en la línea de comandos.

> 1:100
  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
 [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36
 [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54
 [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72
 [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90
 [91]  91  92  93  94  95  96  97  98  99 100

| ¡Buen trabajo!

  |============                                                       |  18%
| El vector es el objeto más simple en R. La mayoría de las operaciones
| están basadas en vectores.

...

  |=============                                                      |  19%
| Por ejemplo, puedes realizar operaciones sobre vectores y R
| automáticamente empareja los elementos de los dos vectores. Introduce
| c(1.1, 2.2, 3.3, 4.4) - c(1, 1, 1, 1) en la línea de comandos.

> c(1.1, 2.2, 3.3, 4.4) - c(1, 1, 1, 1)
[1] 0.1 1.2 2.3 3.4

| ¡Lo estás haciendo muy bien!

  |==============                                                     |  20%
| Nota: Si los dos vectores son de diferente tamaño, R repetirá la secuencia
| más pequeña múltiples veces. Por ejemplo, introduce c(1, 2, 3, 4, 5, 6, 7,
| 8, 9, 10) - c(1, 2) en la línea de comandos.

> c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) - c(1, 2)
 [1] 0 0 2 2 4 4 6 6 8 8

| ¡Mantén este buen nivel!

  |==============                                                     |  21%
| En R casi todo es un objeto. Para ver qué objetos tienes en un momento
| determinado, puedes usar la función ls(). Inténtalo ahora.

> ls()
[1] "mi_variable" "ncol"        "test1"       "tf"          "y"

| ¡Excelente!

  |===============                                                    |  22%
| Como sabes, existen otros tipos de objetos, como los caracteres
| (character).

...

  |================                                                   |  24%
| Las expresiones con caracteres se denotan entre comillas. Por ejemplo,
| introduce "¡Hola Mundo!" en la línea de comandos.

> "¡Hola Mundo!"
[1] "¡Hola Mundo!"

| ¡Traes una muy buena racha!

  |=================                                                  |  25%
| Esto es mejor conocido en R como un vector de caracteres. De hecho, este
| ejemplo es un vector de longitud uno.

...

  |=================                                                  |  26%
| Ahora crea una variable llamada ‘colores’ que contenga un vector con las
| cadenas "rojo", "azul", "verde", "azul", "rojo", en ese orden.

> colores = c("rojo", "azul", "verde", "azul", "rojo")

| No es la respuesta que yo buscaba, pero intenta nuevamente. O escribe
| info() para más opciones.

| Introduce colores <- c("rojo", "azul", "verde", "azul", "rojo") en lalínea
| de comandos.

> colores <- c("rojo", "azul", "verde", "azul", "rojo")

| ¡Muy bien!

  |==================                                                 |  27%
| Ahora imprime el vector ‘colores’ .

> colores
[1] "rojo"  "azul"  "verde" "azul"  "rojo"

| ¡Eres bastante bueno!

  |===================                                                |  28%
| En otros lenguajes como C, carácter (character) hace referencia a un
| simple carácter, y cadena (string) se entiende como un conjunto de
| caracteres ordenados. Una cadena de caracteres es equivalente al valor de
| carácter en R.

...

  |====================                                               |  29%
| Además, hay objetos de tipo numérico (numeric) que se dividen en complejos
| (complex) y enteros (integer). Los últimos ya los conoces, pues has estado
| trabajando con ellos, además de los vectores y los caracteres.

...

  |====================                                               |  30%
| Los complejos en R se representan de la siguiente manera: a+bi, donde 'a'
| es la parte real y 'b' la parte imaginaria. Pruébalo: guarda el valor de
| 2+1i en la variable 'complejo'.

> complejo <- 2+1i

| ¡Todo ese trabajo está rindiendo frutos!

  |=====================                                              |  31%
| Al igual que los demás objetos de tipo numérico, lo complejos pueden hacer
| uso de los operadores aritméticos más comunes, como `+`(suma), `-` (resta,
| o negación en el caso unario), `/`(división), `*` (multiplicación) `^`
| (donde x^2 significa 'x elevada a la potencia 2'). Para obtener la raíz
| cuadrada, usa la función sqrt(), y para obtener el valor absoluto, la
| función abs().

...

  |======================                                             |  33%
| También hay objetos lógicos (logic) que representan los valores lógicos
| falso y verdadero.

...

  |=======================                                            |  34%
| El valor lógico falso puede ser representado por la instrucción FALSE o
| únicamente por la letra F mayúscula; de la misma manera, el valor lógico
| verdadero es representado por la instrucción TRUE o por la letra T.

...

  |=======================                                            |  35%
| Como operadores lógicos están el AND lógico: `&` y `&&` y el OR lógico:
| `|` y `||`.

...

  |========================                                           |  36%
| También existen operadores que devuelven valores lógicos, éstos pueden ser
| de orden, como: `>` (mayor que), `<` (menor que), `>=` (mayor igual) y
| `<=` (menor igual), o de comparación, como: `==` (igualdad) y `!=`
| (diferencia). Por ejemplo, introduce en la línea de comandos mi_variable
| == 15.

> mi_variable == 15
[1] TRUE

| ¡Mantén este buen nivel!

  |=========================                                          |  37%
| Como puedes ver, R te devuelve el valor TRUE, pues si recuerdas, en la
| variable 'mi_variable' asignaste el valor de la expresión (180 / 6) - 15,
| la cual resultaba en el valor 15. Por lo cual, cuando le preguntas a R si
| 'mi_variable' es igual a 15, te devuelve el valor TRUE.

...

  |==========================                                         |  38%
| En R existen algunos valores especiales.

...

  |==========================                                         |  39%
| Por ejemplo, los valores NA son usados para representar valores faltantes.
| Supón que cambias el tamaño de un vector a un valor más grande del
| previamente definido. Recuerda el vector 'complejo', el cual contenía el
| número complejo 2+1i; cambia la longitud de 'complejo'. Ingresa
| length(complejo) <- 3 en la línea de comandos.

> length(complejo) <- 3

| ¡Excelente!

  |===========================                                        |  40%
| Ahora ve el contenido de 'complejo'.

> complejo
[1] 2+1i   NA   NA

| ¡Lo estás haciendo muy bien!

  |============================                                       |  42%
| Los nuevos espacios tendrán el valor NA, el cual quiere decir not
| available (no disponible).

...

  |=============================                                      |  43%
| Si un resultado de la evaluación de alguna expresión aritmética es muy
| grande, R regresa el valor 'Inf' para un valor positivo y '-Inf' para un
| valor negativo (infinitos positivo y negativo, respectivamente). Por
| ejemplo, introduce 2^1024 en la línea de comandos.

> 2^1024
[1] Inf

| Esa es la respuesta que estaba buscando.

  |=============================                                      |  44%
| Algunas veces la evaluación de alguna expresión no tendrá sentido. En
| estos casos, R regresará el valor Nan (not a number). Por ejemplo, divide
| 0 entre 0.

> 0/0
[1] NaN

| Esa es la respuesta que estaba buscando.

  |==============================                                     |  45%
| Adicionalmente, en R existe el objeto null y es representado por el
| símbolo NULL.

...

  |===============================                                    |  46%
| Nota que NULL no es lo mismo que NA, Inf, -Inf o Nan.

...

  |================================                                   |  47%
| Recuerda que R incluye un conjunto de clases para representar fechas y
| horas. Algunas de ellas son: Date, POSIXct y POSTXlt.

...

  |================================                                   |  48%
| Por ejemplo, introduce fecha_primer_curso_R <- Sys.Date() en la línea de
| comandos.

> fecha_primer_curso_R <- Sys.Date()

| ¡Lo estás haciendo muy bien!

  |=================================                                  |  49%
| Ahora imprime el contenido de fecha_primer_curso_R.

> fecha_primer_curso_R
[1] "2018-06-26"

| ¡Acertaste!

  |==================================                                 |  51%
| Recuerda que R te permite llevar a cabo operaciones numéricas y
| estadísticas con las fechas y horas. Además, R incluye funciones para
| manipularlas. Muchas funciones de graficación requieren fechas y horas.

...

  |===================================                                |  52%
| Ahora que conoces los objetos más usados en R, debes saber que además de
| la función c(), en R existe la función vector() para crear vectores. Al
| usar la función vector(), debes especificar el tipo de dato que almacenará
| el vector y el tamaño.

...

  |===================================                                |  53%
| La función vector() crea un vector con los valores por defecto del tipo
| especificado.

...

  |====================================                               |  54%
| Por ejemplo, escribe vector("numeric", length = 10) en la línea de
| comandos.

>
> vector("numeric", length = 10)
 [1] 0 0 0 0 0 0 0 0 0 0

| ¡Es asombroso!

  |=====================================                              |  55%
| Como puedes observar, el vector fue llenado con ceros.

...

  |======================================                             |  56%
| Ahora introduce vector("character", length = 10) en la línea de comandos.

> vector("character", length = 10)
 [1] "" "" "" "" "" "" "" "" "" ""

| ¡Bien hecho!

  |======================================                             |  57%
| Esta vez el vector fue llenado con 10 cadenas vacías.

...

  |=======================================                            |  58%
| Si le indicaras al vector que el tipo fuera "logical", ¿qué crees que
| contendría?

1: ninguna de las anteriores
2: sólo valores FALSE
3: sólo valores TRUE

Selection: 2

| ¡Lo estás haciendo muy bien!

  |========================================                           |  60%
| Crea un vector de tipo "logical" de tamaño 10 usando la función vector().

> vector("logical", length = 10)
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE

| ¡Tu dedicación es inspiradora!

  |=========================================                          |  61%
| Nota: Ahora que conoces los objetos más usados en R, es importante que
| sepas que los vectores sólo pueden contener objetos de la misma clase.
| Para guardar objetos de diferentes clases, puedes usar listas.

...

  |=========================================                          |  62%
| Las listas son una colección ordenada de objetos. Para crear una lista,
| usa la función list() y especifica el contenido de la lista separado por
| comas dentro de los paréntesis. Inténtalo: crea una lista que contenga un
| 0, la cadena "Hola" y el valor TRUE, en ese orden.

> list(0,Hola,FALSE)
Error: object 'Hola' not found
> list(0,"Hola",FALSE)
[[1]]
[1] 0

[[2]]
[1] "Hola"

[[3]]
[1] FALSE


| Estás muy cerca... ¡Puedo sentirlo! Inténtalo de nuevo. O escribe info()
| para más opciones.

| Introduce list(0,"Hola",TRUE) en la línea de comandos.

> list(0,"Hola",TRUE)
[[1]]
[1] 0

[[2]]
[1] "Hola"

[[3]]
[1] TRUE


| ¡Bien hecho!

  |==========================================                         |  63%
| Anteriormente viste que en R los vectores sólo pueden contener objetos de
| la misma clase.

...

  |===========================================                        |  64%
| Pero, ¿qué pasa si creas un vector c(T, 19, 1+3i)? Introduce c(T, 19,
| 1+3i) en la línea de comandos.

> c(T, 19,1+3i)
[1]  1+0i 19+0i  1+3i

| ¡Excelente trabajo!

  |============================================                       |  65%
| Como habrás supuesto, el número complejo 1+3i no puede ser convertido a
| entero ni a objeto de tipo "logical", entonces los valores T y 19 son
| convertidos a los números complejos 1+0i y 19+0i respectivamente. Esto no
| es más que la representación de esos valores en objeto tipo "complex".

...

  |============================================                       |  66%
| Esto se llama coerción.

...

  |=============================================                      |  67%
| La coerción hace que todos los objetos de un vector sean de una misma
| clase. Entonces, cuando creas un vector de diferentes tipos, R busca un
| tipo común, y los elementos que no son de ese tipo son convertidos.

...

  |==============================================                     |  69%
| Otro ejemplo de coerción es cuando usas las funciones as.*().

...

  |===============================================                    |  70%
| Inténtalo: crea un vector de longitud 5 de tipo "numeric" con la función
| vector() y guardarlo en la variable ‘c’.

> c <- vector("numeric",length = 5)

| ¡Muy bien!

  |===============================================                    |  71%
| Revisa el contenido de la variable ‘c’ .

> c
[1] 0 0 0 0 0

| ¡Sigue trabajando de esa manera y llegarás lejos!

  |================================================                   |  72%
| Ahora usa la función as.logical() con el vector c.

> as.logical(c)
[1] FALSE FALSE FALSE FALSE FALSE

| Perseverancia es la respuesta.

  |=================================================                  |  73%
| Como puedes imaginar, el vector de tipo "numeric" fue explícitamente
| convertido a "logical".

...

  |==================================================                 |  74%
| Este tipo de coerción es mejor conocida como coerción explícita. Además de
| as.logical(), también existe as.numeric(), as.character(), as.integer().

...

  |==================================================                 |  75%
| Si usas la función class(), que te dice la clase a la que pertenece un
| objeto, obtendrás que class(c) = "numeric." Pruébalo, ingresa class(c) en
| la línea de comandos.

> class(c)
[1] "numeric"

| ¡Tu dedicación es inspiradora!

  |===================================================                |  76%
| Pero si después pruebas la misma función class() enviándole como argumento
| as.logical(c), obtendrás que es de tipo logical. Compruébalo:

> class(as.logical(c))
[1] "logical"

| ¡Buen trabajo!

  |====================================================               |  78%
| Además de los vectores y las listas, existen las matrices.

...

  |=====================================================              |  79%
| Una matriz es una extensión de un vector de dos dimensiones. Las matrices
| son usadas para representar información de un solo tipo de dos
| dimensiones.

...

  |=====================================================              |  80%
| Una manera de generar una matriz es al usar la función matrix().
| Inténtalo, introduce m <- matrix(data=1:12,nrow=4,ncol=3) en la línea de
| comandos.

> m <- matrix(data=1:12,nrow=4,ncol=3)

| ¡Bien hecho!

  |======================================================             |  81%
| Ahora imprime el contenido de 'm'.

> m
     [,1] [,2] [,3]
[1,]    1    5    9
[2,]    2    6   10
[3,]    3    7   11
[4,]    4    8   12

| ¡Lo has logrado! ¡Buen trabajo!

  |=======================================================            |  82%
| Como puedes observar, creaste una matriz con tres columnas (ncol) y cuatro
| renglones (nrow).

...

  |========================================================           |  83%
| Recuerda que también puedes crear matrices con las funciones cbind, rbind
| y as.matrix().

...

  |========================================================           |  84%
| Los factores son otro tipo especial de vectores usados para representar
| datos categóricos, éstos pueden ser ordenados o sin orden.

...

  |=========================================================          |  85%
| Recuerda el vector 'colores' que creaste previamente y supón que
| representa un conjunto de observaciones acerca de cuál es el color
| preferido de las personas.

...

  |==========================================================         |  87%
| Es una representación perfectamente válida, pero puede llegar a ser
| ineficiente. Ahora representarás los colores como un factor. Introduce
| factor(colores) en la línea de comandos.

> factor(colores)
[1] rojo  azul  verde azul  rojo
Levels: azul rojo verde

| ¡Lo has logrado! ¡Buen trabajo!

  |===========================================================        |  88%
| La impresión de un factor muestra información ligeramente diferente a la
| de un vector de caracteres. En particular, puedes notar que las comillas
| no son mostradas y que los niveles son explícitamente impresos.

...

  |===========================================================        |  89%
| Por último, existen los dataframes, que son una manera muy útil de
| representar datos tabulares. Son uno de los tipos más importantes.

...

  |============================================================       |  90%
| Un dataframe representa una tabla de datos. Cada columna de éste puede ser
| de un tipo diferente, pero cada fila debe tener la misma longitud.

...

  |=============================================================      |  91%
| Ahora crea uno. Introduce data.frame(llave=y, color=colores) en la línea
| de comandos.

> data.frame(llave=y, color=colores)
  llave color
1   561  rojo
2  1105  azul
3  1729 verde
4  2465  azul
5  2821  rojo

| ¡Buen trabajo!

  |==============================================================     |  92%
| ¿Recuerdas los vectores 'y' y 'colores'? Pues con ellos creaste un data
| frame cuya primera columna tiene números de Carmichael y la segunda
| colores.

...

  |==============================================================     |  93%
| Otra manera de crear dataframes es con las funciones read.table() y
| read.csv().

...

  |===============================================================    |  94%
| También puedes usar la función data.matrix() para convertir un data frame
| en una matriz.

...

  |================================================================   |  96%
| Antes de concluir la lección, te mostraré un par de atajos.

...

  |=================================================================  |  97%
| Al inicio de esta lección introdujiste mi_variable <- (180 / 6) - 15 en la
| línea de comandos. Supón que cometiste un error y que querías introducir
| mi_variable <- (180 / 60) - 15, es decir, querías escribir 60, pero
| escribiste 6. Puedes reescribir la expresión o...

...

  |=================================================================  |  98%
| En muchos entornos de programación, presionar la tecla 'flecha hacia
| arriba' te mostrará comandos anteriores. Presiona esta tecla hasta que
| llegues al comando (mi_variable <- (180 / 6) - 15), entonces cambia el
| número 6 por 60 y presiona ENTER. Si la tecla 'flecha hacia arriba' no
| funciona, sólo escribe el comando correcto.

>
> mi_variable <- (180 /60) - 15

| ¡Lo estás haciendo muy bien!

  |================================================================== |  99%
| Por último, puedes teclear las dos primeras letras del nombre de la
| variable y después presionar la tecla Tab (tabulador). La mayoría de los
| entornos de programación muestran una lista de las variables que has
| creado con el prefijo 'mi_'. Esta función se llama autocompletado y es muy
| útil para cuando tienes muchas variables en tu espacio de trabajo.
| Pruébalo, ingresa 'mi_' y autocompleta. Si autocompletar no sirve en tu
| caso, sólo ingresa mi_variable en la línea de comandos).

> mi_variable
[1] -12

| ¡Eres el mejor!

  |===================================================================| 100%
| Has concluido la lección. ¿Te gustaría que se le notificará a Coursera que
| has completado esta lección?

1: No
2: Si

Selection: 2
Â¿CÃºal es tu nombre de usuario registrado en Coursera (email)? maldo.jota@gmail.com
Â¿CÃºal es tu token de la tarea? YQ2nTxosznwyZw8L
Â¡El envÃ­o de la calificaciÃ³n fue satisfactorio!

| ¡Toda esa práctica está rindiendo frutos!

| ¡Has alcanzado el fin de esta lección! Volviendo al menú principal...

///////////////////////////////////////////////////////////////////////////////

| Por favor escoge un curso o teclea 0 para salir de swirl.

1: programacion-estadistica-r
2: ¡Llévame al depósito de cursos swirl!

Selection: 1

| Selecciona una lección por favor, o teclea 0 para volver al menú del
| curso.

 1: Obtener Ayuda
 2: Objetos Tipos de Datos y Operaciones Basicas
 3: Subconjuntos de Datos
 4: Leer y escribir Datos
 5: Funciones
 6: Funciones apply
 7: Graficacion
 8: Parametros en el Sistema de Graficos
 9: Colores en el Sistema de Graficos
10: Graficacion con texto y notacion matematica
11: Creacion de Graficas en 3D
12: Expresiones regulares
13: Graficacion con ggplot2
14: Simulacion

Selection: 3
  |                                                                   |   0%

| En esta lección conocerás las maneras de acceder a las estructuras de
| datos en el lenguaje R.

...

  |=                                                                  |   2%
| R tiene una sintaxis especializada para acceder a las estructuras de
| datos.

...

  |==                                                                 |   4%
| Tú puedes obtener un elemento o múltiples elementos de una estructura de
| datos usando la notación de indexado de R.

...

  |====                                                               |   5%
| R provee diferentes maneras de referirse a un elemento (o conjunto de
| elementos) de un vector. Para probar estas diferentes maneras crea una
| variable llamada 'mi_vector' que contenga un vector con los números
| enteros del 11 al 30. Recuerda que puedes usar el operador secuencia ':'.

> mi_vector <- 11:30

| ¡Excelente!

  |=====                                                              |   7%
| Y ahora ve su contenido.

> mi_vector
 [1] 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30

| ¡Excelente!

  |======                                                             |   9%
| La manera más común de buscar un elemento en R es por medio de un vector
| numérico.

...

  |=======                                                            |  11%
| Puedes buscar elementos por posición en un vector usando la siguiente
| notación: x[s], donde 'x' es un vector del cual deseas obtener elementos y
| 's' es un segundo vector representando el conjunto de índices de elementos
| que te gustaría consultar.

...

  |========                                                           |  12%
| Debes saber que en R las posiciones de los elementos de un vector
| comienzan en 1 y no en 0, como en lenguajes de programación como Java o C.

...

  |=========                                                          |  14%
| Puedes usar un vector entero para buscar un simple elemento o múltiples.

...

  |===========                                                        |  16%
| Por ejemplo, obten el tercer elemento de 'mi_vector'.

> mi_vector[3]
[1] 13

| ¡Traes una muy buena racha!

  |============                                                       |  18%
| Ahora obten los primeros cinco elementos de 'mi_vector'.

> mi_vector[:5]
Error: unexpected ':' in "mi_vector[:"
> mi_vector[1:5]
[1] 11 12 13 14 15

| Esa es la respuesta que estaba buscando.

  |=============                                                      |  19%
| No necesariamente los índices deben ser consecutivos. Ingresa
| mi_vector[c(4,6,13)] en la línea de comandos.

> mi_vector[c(4,6,13)]
[1] 14 16 23

| ¡Eres bastante bueno!

  |==============                                                     |  21%
| Asimismo, no es necesario que los índices se encuentren ordenados. Ingresa
| mi_vector[c(6,13,4)] en la línea de comandos.

> mi_vector[c(6,13,4)]
[1] 16 23 14

| ¡Eres bastante bueno!

  |===============                                                    |  23%
| Como un caso especial, puedes usar la notación [[]] para referirte a un
| solo elemento. Ingresa mi_vector[[3]] en la línea de comandos.

> mi_vector[[3]]
[1] 13

| ¡Eres el mejor!

  |================                                                   |  25%
| La notación [[]] funciona de la misma manera que la notación [] en este
| caso.

...

  |==================                                                 |  26%
| También puedes usar enteros negativos para obtener un vector que consista
| en todos los elementos, excepto los elementos especificados. Excluye los
| elementos 9:15, al especificar -9:-15.

> mi_vector[-9:-15]
 [1] 11 12 13 14 15 16 17 18 26 27 28 29 30

| ¡Eso es correcto!

  |===================                                                |  28%
| Como alternativa a indexar con un vector de enteros, puedes indexar a
| través de un vector lógico.

...

  |====================                                               |  30%
| Como ejemplo crea un vector lógico de longitud 10 con valores lógicos
| alternados, TRUE y FALSE (rep(c(TRUE,FALSE),10)), y consulta con él
| mi_vector[rep(c(TRUE,FALSE),10)].

> (rep(c(TRUE,FALSE),10))
 [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE
[13]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE

| Estás muy cerca... ¡Puedo sentirlo! Inténtalo de nuevo. O escribe info()
| para más opciones.

| Introduce mi_vector[rep(c(TRUE,FALSE),10)] en la línea de comandos.

> mi_vector[rep(c(TRUE,FALSE),10)]
 [1] 11 13 15 17 19 21 23 25 27 29

| ¡Eres el mejor!

  |=====================                                              |  32%
| Como podrás notar, lo que ocurrió fue que indexaste únicamente los
| elementos en las posiciones impares, puesto que creaste un vector con
| elementos TRUE en las posiciones impares y FALSE en las pares.

...

  |======================                                             |  33%
| El vector índice no necesita ser de la misma longitud que el vector a
| indexar. R repetirá el vector más corto y regresará los valores que cacen.
| Ingresa mi_vector[c(FALSE,FALSE,TRUE)] en la linea de comandos.

> mi_vector[c(FALSE,FALSE,TRUE)]
[1] 13 16 19 22 25 28

| ¡Mantén este buen nivel!

  |========================                                           |  35%
| Notarás que ahora indexaste los índices de los elementos múltiplos de 3.

...

  |=========================                                          |  37%
| Es muy útil calcular un vector lógico de un mismo vector. Por ejemplo,
| busca elementos más grandes que 20. Ingresa en la línea de comandos
| mi_vector > 20.

> mi_vector > 20
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE
[13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE

| ¡Lo has logrado! ¡Buen trabajo!

  |==========================                                         |  39%
| Y ahora indexa 'mi_vector' usando el vector previamente calculado. Ingresa
| mi_vector[(mi_vector > 20)] en la línea de comandos.

> mi_vector[(mi_vector > 20)]
 [1] 21 22 23 24 25 26 27 28 29 30

| ¡Es asombroso!

  |===========================                                        |  40%
| También puedes usar esta notación para extraer partes de una estructura de
| datos multidimensional.

...

  |============================                                       |  42%
| Un arreglo es un vector multidimensional. Vectores y arreglos se almacenan
| de la misma manera internamente, pero un arreglo se muestra diferente y se
| accede diferente.

...

  |=============================                                      |  44%
| Para crear un arreglo de dimensión 3x3x2 y de contenido los números del 1
| al 18 y guardarlo en la variable 'mi_arreglo', ingresa mi_arreglo <-
| array(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18),dim=c(3,3,2)) en la
| línea de comandos.

> mi_arreglo <-array(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18),dim=c(3,3,2))

| ¡Acertaste!

  |===============================                                    |  46%
| Ahora ve el contenido de la variable 'mi_arreglo'.

> mi_arreglo
, , 1

     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    2    5    8
[3,]    3    6    9

, , 2

     [,1] [,2] [,3]
[1,]   10   13   16
[2,]   11   14   17
[3,]   12   15   18


| ¡Eso es trabajo bien hecho!

  |================================                                   |  47%
| R tiene una manera muy limpia de referirse a parte de un arreglo. Se
| especifican índices para cada dimensión, separados por comas. Ingresa
| mi_arreglo[1,3,2] en la línea de comandos.

> mi_arreglo[1,3,2]
[1] 16

| ¡Lo estás haciendo muy bien!

  |=================================                                  |  49%
| Asimismo, puedes ingresar mi_arreglo[1:2,1:2,1] en la línea de comandos.
| ¡Inténtalo!

> mi_arreglo[1:2,1:2,1]
     [,1] [,2]
[1,]    1    4
[2,]    2    5

| ¡Eso es correcto!

  |==================================                                 |  51%
| Una matriz es simplemente un arreglo bidimensional. Ahora crea una matriz
| con 3 renglones y 3 columnas con los números enteros del 1 al 9 y guárdala
| en la variable 'mi_matriz'.

> mi_matriz <- [1:9,1:9,3]
Error: unexpected '[' in "mi_matriz <- ["
> mi_matriz <- mi_arreglo[1:3,1:3,1]

| Intenta de nuevo. O escribe info() para más opciones.

| Ingresa mi_matriz <- matrix(data=1:9,nrow=3,ncol=3) en la línea de
| comandos.

> mi_matriz <- matrix(data=1:9,nrow=3,ncol=3)

| ¡Eres el mejor!

  |===================================                                |  53%
| Al igual que con los arreglos, para obtener todos los renglones o columnas
| de una dimensión de una matriz, simplemente omite los índices.

...

  |====================================                               |  54%
| Por ejemplo, si quisiéras solo el primer renglón de 'mi_matriz', basta con
| ingresar mi_matriz[1,] en la línea de comandos. ¡Inténtalo!

> mi_matriz[1,]
[1] 1 4 7

| ¡Muy bien!

  |======================================                             |  56%
| ¡Ahora obtén solo la primera columna!

> mi_matriz[,1]
[1] 1 2 3

| ¡Eres bastante bueno!

  |=======================================                            |  58%
| También puedes referirte a un rango de renglones. Ingresa mi_matriz[2:3,]
| en la línea de comandos.

> mi_matriz[2:3,]
     [,1] [,2] [,3]
[1,]    2    5    8
[2,]    3    6    9

| ¡Eso es correcto!

  |========================================                           |  60%
| O referirte a un conjunto no contiguo de renglones. Ingresa
| mi_matriz[c(1,3),] en la línea de comandos.

> mi_matriz[c(1,3),]
     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    3    6    9

| ¡Eres el mejor!

  |=========================================                          |  61%
| En los ejemplos de arriba solo has visto estructuras de datos basadas en
| un solo tipo. Recuerda que R tiene un tipo de datos incorporado para la
| mezcla de objetos de diferentes tipos, llamados listas.

...

  |==========================================                         |  63%
| Debes de saber que en R las listas son sutilmente diferentes de las listas
| en muchos otros lenguajes. Las listas en R contienen una selección
| heterogénea de objetos. Puedes nombrar cada componente en una lista.

...

  |===========================================                        |  65%
| Los elementos en una lista pueden ser referidos por su ubicación o por su
| nombre.

...

  |=============================================                      |  67%
| Ingresa este ejemplo de una lista con cuatro componentes nombrados carro
| <- list(color="rojo", nllantas=4, marca= "Renault", ncilindros=4).

> carro <- list(color="rojo", nllantas=4, marca= "Renault", ncilindros=4)

| ¡Buen trabajo!

  |==============================================                     |  68%
| Tú puedes acceder a los elementos de una lista de múltiples formas. Puedes
| usar la misma notación que usaste con los vectores.

...

  |===============================================                    |  70%
| Y además puedes indexar un elemento por nombre usando la notación $. Por
| ejemplo, ingresa carro$color en la línea de comandos.

> carro$color
[1] "rojo"

| ¡Todo ese trabajo está rindiendo frutos!

  |================================================                   |  72%
| Además, puedes usar la notación [] para indexar un conjunto de elementos
| por nombre. Ingresa carro[c("ncilindros","nllantas")] en la línea de
| comandos.

> carro[c("ncilindros","nllantas")]
$ncilindros
[1] 4

$nllantas
[1] 4


| ¡Es asombroso!

  |=================================================                  |  74%
| También puedes indexar por nombre usando la notación [[]] cuando
| seleccionas un simple elemento. Por ejemplo, ingresa carro[["marca"]] en
| la línea de comandos.

> carro[["marca"]]
[1] "Renault"

| ¡Es asombroso!

  |===================================================                |  75%
| Hasta puedes indexar por nombre parcial usando la opción exact=FALSE.
| Ingresa carro[["mar",exact=FALSE]] en la línea de comandos.

> carro[["mar",exact=FALSE]]
[1] "Renault"

| ¡Muy bien!

  |====================================================               |  77%
| Ahora crea la siguiente lista: camioneta <- list(color="azul", nllantas=4,
| marca= "BMW", ncilindros=6).

> camioneta <- list(color="azul", nllantas=4,marca= "BMW", ncilindros=6)

| ¡Lo has logrado! ¡Buen trabajo!

  |=====================================================              |  79%
| Algunas veces una lista será una lista de listas. Ingresa cochera <-
| list(carro, camioneta).

> cochera <-list(carro, camioneta)

| ¡Traes una muy buena racha!

  |======================================================             |  81%
| Ahora ve el contenido de 'cochera'.

> cochera
[[1]]
[[1]]$color
[1] "rojo"

[[1]]$nllantas
[1] 4

[[1]]$marca
[1] "Renault"

[[1]]$ncilindros
[1] 4


[[2]]
[[2]]$color
[1] "azul"

[[2]]$nllantas
[1] 4

[[2]]$marca
[1] "BMW"

[[2]]$ncilindros
[1] 6



| Perseverancia es la respuesta.

  |=======================================================            |  82%
| Tú puedes usar la notación [[]] para referirte a un elemento en este tipo
| de estructura de datos. Para hacer esto usa un vector como argumento. R
| iterará a través de los elementos en el vector referenciando sublistas.

...

  |========================================================           |  84%
| Ingresar cochera[[c(2, 1)]] en la línea de comandos.

> cochera[[c(2, 1)]]
[1] "azul"

| ¡Acertaste!

  |==========================================================         |  86%
| Recuerda que los data frames son una lista que contiene múltiples vectores
| nombrados que tienen la misma longitud. A partir de este momento usarás el
| data frame cars del paquete datasets. No te preocupes, este paquete viene
| cargado por defecto.

...

  |===========================================================        |  88%
| Los datos que conforman al data frame cars son un conjunto de
| observaciones tomadas en la década de 1920; estas observaciones describen
| la velocidad (mph) de algunos carros y la distancia (ft) que les tomó
| parar.

...

  |============================================================       |  89%
| Ve el contenido del data frame cars. Ingresa cars en la línea de comandos.

> cars
   speed dist
1      4    2
2      4   10
3      7    4
4      7   22
5      8   16
6      9   10
7     10   18
8     10   26
9     10   34
10    11   17
11    11   28
12    12   14
13    12   20
14    12   24
15    12   28
16    13   26
17    13   34
18    13   34
19    13   46
20    14   26
21    14   36
22    14   60
23    14   80
24    15   20
25    15   26
26    15   54
27    16   32
28    16   40
29    17   32
30    17   40
31    17   50
32    18   42
33    18   56
34    18   76
35    18   84
36    19   36
37    19   46
38    19   68
39    20   32
40    20   48
41    20   52
42    20   56
43    20   64
44    22   66
45    23   54
46    24   70
47    24   92
48    24   93
49    24  120
50    25   85

| ¡Toda esa práctica está rindiendo frutos!

  |=============================================================      |  91%
| Te puedes referir a los elementos de un data frame (o a los elementos de
| una lista) por nombre usando el operador $. Ingresa cars$speed en la línea
| de comandos.

> cars$speed
 [1]  4  4  7  7  8  9 10 10 10 11 11 12 12 12 12 13 13 13 13 14 14 14 14 15
[25] 15 15 16 16 17 17 17 18 18 18 18 19 19 19 20 20 20 20 20 22 23 24 24 24
[49] 24 25

| ¡Traes una muy buena racha!

  |==============================================================     |  93%
| Supón que deseas saber a qué velocidad iban los carros a los que les tomó
| más de 100 pies (ft) frenar.

...

  |===============================================================    |  95%
| Una manera de encontrar valores específicos en un data frame es al usar un
| vector de valores booleanos para especificar cuál o cuáles elementos
| regresar de la lista. La manera de calcular el vector apropiado es así:
| cars$dist>100. ¡Inténtalo!

> cars$dist>100
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[49]  TRUE FALSE

| ¡Excelente trabajo!

  |=================================================================  |  96%
| Entonces puedes usar ese vector para referirte al elemento correcto.
| Ingresa cars$speed[cars$dist>100] en la línea de comandos.

> cars$speed[cars$dist>100]
[1] 24

| ¡Lo has logrado! ¡Buen trabajo!

  |================================================================== |  98%
| Ahora ya sabes cómo acceder a las estructuras de datos.

...

  |===================================================================| 100%
| Has concluido la lección. ¿Te gustaría que se le notificará a Coursera que
| has completado esta lección?

1: No
2: Si

Selection: 2
Â¿CÃºal es tu nombre de usuario registrado en Coursera (email)? maldo.jota@gmail.com
Â¿CÃºal es tu token de la tarea? gjVBk9TJfvDDkueO
Â¡El envÃ­o de la calificaciÃ³n fue satisfactorio!

| ¡Excelente trabajo!

| ¡Has alcanzado el fin de esta lección! Volviendo al menú principal...

///////////////////////////////////////////////////////////////////////////////

Selection: 4
  |                                                                   |   0%

| En esta lección conocerás cómo cargar conjuntos de datos en R y guardar
| estos conjuntos desde R.

...

  |=                                                                  |   2%
| Una de las mejores cosas acerca de R es lo fácil que es añadir información
| desde otros programas.

...

  |===                                                                |   4%
| R puede importar conjuntos de datos desde archivos de texto, otros
| softwares de estadística y hasta hojas de cálculo. No es necesario tener
| una copia local del archivo. Tú puedes especificar la ubicación del
| archivo desde una url y R buscará el archivo en Internet.

...

  |====                                                               |   7%
| La mayoría de los archivos que contienen información tienen un formato
| similar. Generalmente cada línea del archivo representa una observación o
| registro, por lo que cada línea contiene un conjunto de diferentes
| variables asociadas con la observación.

...

  |======                                                             |   9%
| Algunas veces, diferentes variables son separadas por un carácter
| especial, llamado delimitador. Otra veces las variables son diferenciadas
| por su ubicación en cada línea.

...

  |=======                                                            |  11%
| En esta lección trabajarás con el archivo inmigintnalpry.csv el cual
| contiene la estimación de personas provenientes de otros países que llegan
| a cada uno de los estados de México. Si tienes suerte, el archivo se
| mostrará en algún editor; de lo contrario búscalo en el subdirectorio
| swirl_temp de tu directorio de trabajo y velo en una aplicación separada.

Error: File swirl_temp/inmigintnalpry.csv does not exist.
In addition: Warning message:
In file.copy(loc, "swirl_temp", overwrite = TRUE) :
  problem copying C:\Users\Juan_Maldonado\Documents\R\win-library\3.4\swirl\Courses\programacion-estadistica-r\Leer_y_escribir_Datos\inmigintnalpry.csv to swirl_temp\inmigintnalpry.csv: No such file or directory

| Saliendo de swirl ahora. Teclea swirl() para reanudar.

> swirl()

| ¡Bienvenido a swirl! Por favor, inicia sesión. Si ya has estado aquí
| antes, ingresa el mismo nombre de usuario que usaste la última vez. Si es
| tu primera vez aquí, elige un nombre corto (cada vez que arranques swirl,
| tendrás que ingresar este nombre).

¿Cómo debo de referirme a ti? maldojota

| ¿Quisieras reanudar alguna de estas lecciones?

1: programacion-estadistica-r Leer y escribir Datos
2: No. Déjame iniciar con algo nuevo.

Selection: 1


| En esta lección trabajarás con el archivo inmigintnalpry.csv el cual
| contiene la estimación de personas provenientes de otros países que llegan
| a cada uno de los estados de México. Si tienes suerte, el archivo se
| mostrará en algún editor; de lo contrario búscalo en el subdirectorio
| swirl_temp de tu directorio de trabajo y velo en una aplicación separada.

Error: File swirl_temp/inmigintnalpry.csv does not exist.
In addition: Warning message:
In file.copy(loc, "swirl_temp", overwrite = TRUE) :
  problem copying C:\Users\Juan_Maldonado\Documents\R\win-library\3.4\swirl\Courses\programacion-estadistica-r\Leer_y_escribir_Datos\inmigintnalpry.csv to swirl_temp\inmigintnalpry.csv: No such file or directory

| Saliendo de swirl ahora. Teclea swirl() para reanudar.

> swirl()

| ¡Bienvenido a swirl! Por favor, inicia sesión. Si ya has estado aquí
| antes, ingresa el mismo nombre de usuario que usaste la última vez. Si es
| tu primera vez aquí, elige un nombre corto (cada vez que arranques swirl,
| tendrás que ingresar este nombre).

¿Cómo debo de referirme a ti? maldojota

| ¿Quisieras reanudar alguna de estas lecciones?

1: programacion-estadistica-r Leer y escribir Datos
2: No. Déjame iniciar con algo nuevo.

Selection: 1


| En esta lección trabajarás con el archivo inmigintnalpry.csv el cual
| contiene la estimación de personas provenientes de otros países que llegan
| a cada uno de los estados de México. Si tienes suerte, el archivo se
| mostrará en algún editor; de lo contrario búscalo en el subdirectorio
| swirl_temp de tu directorio de trabajo y velo en una aplicación separada.

(Se ha copiado el archivo inmigintnalpry.csv a la ruta C:/Users/Juan Maldonado/Documents/swirl_temp/inmigintnalpry.csv ).
...

  |=========                                                          |  13%
| Como podrás notar el primer renglón del archivo contiene los nombres de
| las columnas, en este caso los nombres de cada una de las variables de la
| observación; además, el archivo tiene delimitada cada variable de la
| observación por una coma.

...

  |==========                                                         |  15%
| Para cargar este archivo a R, debes especificar que el primer renglón
| contiene los nombres de las columnas y que el delimitador es una coma.

...

  |============                                                       |  17%
| Para hacer esto necesitarás especificar los argumentos header y sep en la
| función read.table. Header para especificar que el primer renglón contiene
| los nombres de la columnas (header=TRUE) y sep para especificar el
| delimitador (sep=",").

...

  |=============                                                      |  20%
| ¡Importa el archivo inmigintnalpry.csv! Ingresa datos <-
| read.table("swirl_temp/inmigintnalpry.csv", header=TRUE, sep=",",
| fileEncoding = "latin1") en la línea de comandos.

warning messages from top-level task callback 'mini'
Warning message:
In file.copy(loc, "swirl_temp", overwrite = TRUE) :
  problem copying C:\Users\Juan_Maldonado\Documents\R\win-library\3.4\swirl\Courses\programacion-estadistica-r\Leer_y_escribir_Datos\inmigintnalpry.csv to swirl_temp\inmigintnalpry.csv: No such file or directory
> datos <-read.table("swirl_temp/inmigintnalpry.csv", header=TRUE, sep=",", fileEncoding = "latin1")

| ¡Lo has logrado! ¡Buen trabajo!

  |===============                                                    |  22%
| Como podrás notar usaste el argumento fileEncoding; esto debido a que de
| no usarlo R no podría importar el archivo, puesto que la segunda cadena
| del archivo: año, no es una cadena válida para el tipo de codificación que
| read.table usa por defecto. Para poder leer el archivo basta con
| especificar el argumento fileEncoding. De no especificarlo R te indicará
| que hay un error.

...

  |================                                                   |  24%
| Intenta usar datos_2 <- read.table("swirl_temp/inmigintnalpry.csv",
| header=TRUE, sep=","). Debido a que el archivo inmigintnalpry.csv contiene
| caracteres especiales como la ñ, R PUEDE MOSTRARTE UN ERROR. Si R te
| muestra el error, ingresa ok() en la línea de comandos para continuar.

> datos_2 <- read.table("swirl_temp/inmigintnalpry.csv",header=TRUE, sep=",")

| Intenta de nuevo. ¡De cualquier forma hacerlo bien a la primera es
| aburrido! O escribe info() para más opciones.

| Ingresa datos2 <- read.table("swirl_temp/inmigintnalpry.csv", header=TRUE,
| sep=","), después ingresa ok() para continuar.

> ok()

| ¡Excelente!

  |=================                                                  |  26%
| Este error es muy común cuando intentas leer archivos que su contenido
| está en español; esto se debe a que usa otra codificación para poder
| abarcar más símbolos que no usan otros idiomas, como en este caso la ñ.
| Para poder leer archivos que contengan ñ, basta con especificar el
| argumento fileEncoding, el cual indica la codificación del archivo a
| importar; en este caso, usarás fileEncoding = "latin1".

...

  |===================                                                |  28%
| Comúnmente las opciones más importantes son sep y header. Casi siempre
| debes saber el campo separador y si hay un campo header.

...

  |====================                                               |  30%
| Ahora ve lo que contiene 'datos'. Para hacer esto usarás la función
| View(). Si te encuentras en Rstudio simplemente puedes presionar el nombre
| de la variable datos en el apartado Entorno ('Environment') y te mostrará
| su contenido. Presiona la variable datos en Rstudio o ingresa View(datos)
| en la línea de comandos.

> View(datos)

| ¡Mantén este buen nivel!

  |======================                                             |  33%
| ¡Como podrás notar el archivo contiene 302060 observaciones!

...

  |=======================                                            |  35%
| Es importante saber que no solo existe read.table(). R además incluye un
| conjunto de funciones que llaman a read.table() con diferentes opciones
| por defecto para valores como sep y header, y algunos otros. En la mayoría
| de los casos encontrarás que puedes usar read.csv() para archivos
| separados por comas o read.delim() para archivos delimitados por TAB sin
| especificar otras opciones.

...

  |=========================                                          |  37%
| La mayoría de las veces deberías ser capaz de cargar archivos de texto en
| R con la función read.table(). Pero algunas veces serás proveído con un
| archivo de texto que no pueda ser leído correctamente con esta función.

...

  |==========================                                         |  39%
| Si estás en Europa y usas comas para indicar punto decimal en los números,
| entonces puedes usar read.cvs2() y read.delim2().

...

  |============================                                       |  41%
| Una manera de agilizar la lectura de datos es usando el parámetro
| colClasses de la función read.table().

...

  |=============================                                      |  43%
| Este parámetro recibe un vector, el cual describe cada uno de los tipos
| por columna que va a leer. Esto agiliza la lectura debido a que
| read.table() normalmente lee toda la información y después revisa cada una
| de las columnas, y decide conforme a lo que vio de qué tipo es cada
| columna, y al indicar el parámetro colClasses le dices a la función
| read.table() de qué tipo son los datos que va a ver, con lo que te evitas
| el chequeo para saber el tipo de cada columna.

...

  |===============================                                    |  46%
| Puedes averiguar la clase de las columnas de manera fácil cuando tienes
| archivos grandes.

...

  |================================                                   |  48%
| Lo que puedes hacer es indicarle a read.table() que solo lea los primeros
| 100 renglones del archivo; esto lo haces indicando el parámetro nrow. Cabe
| recordar que debes especificar la codificación del archivo, debido a que
| usa caracteres especiales, también que el primer renglón son los nombres
| de la columnas y que el delimitador es una coma. Ingresa inicial <-
| read.table("swirl_temp/inmigintnalpry.csv", header=TRUE, sep=",",
| fileEncoding = "latin1", nrow = 100) en la línea de comandos.

> inicial <-read.table("swirl_temp/inmigintnalpry.csv", header=TRUE, sep=",",fileEncoding = "latin1", nrow = 100)

| ¡Mantén este buen nivel!

  |==================================                                 |  50%
| Con esto has conseguido leer las primeras 100 observaciones.

...

  |===================================                                |  52%
| Después usa la función sapply mandándole como parámetros el objeto inicial
| (el cual contiene las 100 observaciones) y la función class(). Ingresa
| clases <- sapply(inicial, class) en la línea de comandos.

> clases <- sapply(inicial, class)

| ¡Sigue trabajando de esa manera y llegarás lejos!

  |====================================                               |  54%
| Con esto lo que conseguiste fue aplicar la función class() a cada una de
| las columnas del objeto inicial. La función class() es una función que
| determina la clase o tipo de un objeto. Entonces los tipos de cada una de
| las columnas fueron guardados en el objeto clases.

...

  |======================================                             |  57%
| Para ver el contenido del objeto 'clases', basta con escribir clases en la
| línea de comandos.

> clases
    renglon         año         ent      id_ent      cvegeo        sexo
  "integer"   "integer"    "factor"   "integer"   "integer"    "factor"
       edad inmigintnal
  "integer"   "numeric"

| ¡Sigue trabajando de esa manera y llegarás lejos!

  |=======================================                            |  59%
| Por último, con este vector de clases, leerás todo el archivo usando la
| función read.table, pero pasándole el argumento colClasses. Ingresa datos
| <- read.table("swirl_temp/inmigintnalpry.csv", header=TRUE, sep=",",
| fileEncoding = "latin1", colClasses=clases) en la línea de comandos.

> datos<- read.table("swirl_temp/inmigintnalpry.csv", header=TRUE, sep=",",fileEncoding = "latin1", colClasses=clases)

| Esa es la respuesta que estaba buscando.

  |=========================================                          |  61%
| Como podrás notar el tiempo de lectura mejoró significativamente usando
| este truco.

...

  |==========================================                         |  63%
| Si deseas guardar objetos, la manera más simple es usando la función
| save(). Por ejemplo, puedes usar el siguiente comando para salvar el
| objeto ‘datos’ y el objeto ‘clases’ en el archivo
| swirl_temp/datos_inmigrates.RData. Ingresa save(datos, clases,
| file="swirl_temp/datos_inmigrates.RData") en la línea de comandos.

> save(datos, clases,file="swirl_temp/datos_inmigrates.RData")

| ¡Muy bien!

  |============================================                       |  65%
| La función save() escribe una representación externa de los objetos
| especificados a un archivo señalado. Además, como ya te habrás dado
| cuenta, tú puedes guardar múltiples objetos en el mismo archivo, tan solo
| al listarlos en la función save().

...

  |=============================================                      |  67%
| Es importante notar que en R, las rutas de archivo siempre son
| especificadas con diagonales ("/"), aun estando en Microsoft Windows. Así
| que para salvar este archivo al directorio "C:\Documents and Settings\Mi
| Usuario\Mis Documentos\datos_inmigrates.RData, solo usarías el siguiente
| comando: save(datos,file="C:/Documents and Settings/Mi Usuario/Mis
| Documentos/datos_inmigrates.RData").

...

  |===============================================                    |  70%
| También es importante notar que el argumento file debe ser explícitamente
| nombrado.

...

  |================================================                   |  72%
| Ahora que has guardado los objetos 'datos' y 'clases' en un archivo,
| puedes borrarlos. Introduce rm(datos,clases) en la línea de comandos.

> rm(datos,clases)

| ¡Tu dedicación es inspiradora!

  |==================================================                 |  74%
| Y si ahora usas la función ls(), la cual como recordarás muestra qué
| conjuntos de datos y funciones un usuario ha definido, verás que no están
| presentes los objetos datos y clases. Ingresa ls() en la línea de
| comandos.

> ls()
 [1] "c"                    "camioneta"            "carro"
 [4] "cochera"              "colores"              "complejo"
 [7] "datos_2"              "display_swirl_file"   "fecha_primer_curso_R"
[10] "find_course"          "inicial"              "m"
[13] "mi_arreglo"           "mi_matriz"            "mi_variable"
[16] "mi_vector"            "ncol"                 "ok"
[19] "test1"                "tf"                   "y"

| ¡Tu dedicación es inspiradora!

  |===================================================                |  76%
| Ahora, puedes fácilmente cargar los objetos ‘datos’ y ‘clases’ devuelta a
| R con la función load(). Solo debes especificar el nombre del archivo
| donde los guardaste. Ingresa load("swirl_temp/datos_inmigrates.RData") en
| la línea de comandos.

> load("swirl_temp/datos_inmigrates.RData")

| ¡Eres el mejor!

  |====================================================               |  78%
| Y si ahora usas la función ls(), verás que están presentes los objetos
| 'datos' y 'clases'. Ingresa ls() en la línea de comandos.

> ls()
 [1] "c"                    "camioneta"            "carro"
 [4] "clases"               "cochera"              "colores"
 [7] "complejo"             "datos"                "datos_2"
[10] "display_swirl_file"   "fecha_primer_curso_R" "find_course"
[13] "inicial"              "m"                    "mi_arreglo"
[16] "mi_matriz"            "mi_variable"          "mi_vector"
[19] "ncol"                 "ok"                   "test1"
[22] "tf"                   "y"

| ¡Bien hecho!

  |======================================================             |  80%
| Es importante saber que los archivos guardados en R funcionarán en todas
| las plataformas; es decir, archivos guardados en Linux funcionarán si son
| cargados desde Windows o Mac OS X.

...

  |=======================================================            |  83%
| Si deseas guardar cada uno de los objetos de tu espacio de trabajo
| (workspace), puedes hacerlo usando la función save.image(). De hecho,
| cuando salgas de la session de R, se te preguntará si deseas salvar tu
| actual espacio de trabajo (workspace). Si señalas que sí lo deseas, tu
| espacio de trabajo será guardado de la misma manera que usar esta función.

...

  |=========================================================          |  85%
| Por último, al igual que para importar datos existe la función
| read.table(), para exportar datos a un archivo de texto existe la función
| write.table().

...

  |==========================================================         |  87%
| Normalmente los datos a exportar son data frames y matrices.

...

  |============================================================       |  89%
| Para exportar un objeto a un archivo basta con escribir la función
| write.table() y como argumento el nombre del objeto, además del nombre del
| archivo donde se guardará. Ingresa write.table(datos,
| file="swirl_temp/datos.txt") en la línea de comandos.

> write.table(datos, file="swirl_temp/datos.txt")

| ¡Eres el mejor!

  |=============================================================      |  91%
| Si tienes suerte, te mostraré el archivo datos.txt en algún editor; de lo
| contrario, búscalo en el subdirectorio swirl_temp de tu directorio de
| trabajo y velo en una aplicación separada.

...

  |===============================================================    |  93%
| Como podrás notar el archivo datos.txt no es igual al archivo
| inmigintnalpry.csv que al inicio de esta lección te mostré. Una de las
| principales razones es que para escribir el objeto datos no especificaste
| un delimitador (sep) y por defecto R delimitó con espacios.

...

  |================================================================   |  96%
| Al igual que con la función read.table(), R incluye un conjunto de
| funciones que llaman a write.table() con diferentes opciones por defecto,
| como lo son write.csv() y write.csv2().

...

  |================================================================== |  98%
| Si deseas, puedes jugar con las funciones write.*() para lograr que
| datos.txt sea identico a inmigintnalpry.csv. Recuerda que para ver los
| parámetros de write.*() puedes usar help(); por ejemplo, help(write.csv).

...

  |===================================================================| 100%
| Has concluido la lección. ¿Te gustaría que se le notificará a Coursera que
| has completado esta lección?

1: Si
2: No

Selection: 1
Â¿CÃºal es tu nombre de usuario registrado en Coursera (email)? maldo.jota@gmail.com
Â¿CÃºal es tu token de la tarea? qRgAm09BktbzNPap
Â¡El envÃ­o de la calificaciÃ³n fue satisfactorio!

| ¡Acertaste!

| ¡Has alcanzado el fin de esta lección! Volviendo al menú principal...

////////////////////////////////////////////////////////////////////////////////


Selection: 5
 |                                                                   |   0%

| En esta lección conocerás las funciones del lenguaje R.

...

 |==                                                                 |   3%
| En R las operaciones que hacen todo el trabajo son llamadas funciones.

...

 |====                                                               |   6%
| Una función es un objeto en R, que puede tomar como entrada algunos
| objetos (llamados argumentos de función) y puede regresar un objeto de
| salida.

...

 |======                                                             |   9%
| Las mayoría de las funciones son de la siguiente forma: f(argumento_1,
| argumento_2, ...). Donde f es el nombre de la función y argumento_1,
| argumento_2, ... son argumentos para la función.

...

 |========                                                           |  12%
| Has usado alguna función anteriormente, ya que no se puede hacer nada
| interesante sin ellas. Todo el trabajo en R es hecho por funciones.

...

 |==========                                                         |  16%
| Una función que has estado usando a lo largo del curso es la función c(),
| la cual crea un vector de los elementos que le sean pasados como
| argumentos. Por ejemplo introduce c(1, 03, 2016) en la línea de comandos.

> c(1, 03, 2016)
[1]    1    3 2016

| ¡Es asombroso!

 |=============                                                      |  19%
| La mayoría de las funciones en R regresan un valor; este valor puede ser
| calculado con base en el ambiente de la computadora o con base en la
| entrada (argumentos), como en este caso, en donde el valor regresado es el
| vector que contiene a 1, 3 y 2016.

...

 |===============                                                    |  22%
| Cada inicialización de variables en R, operaciones aritméticas, hasta
| repetir código en un loop, puede ser escrita como una función.

...

 |=================                                                  |  25%
| Las funciones son creadas usando la función especial function() y una vez
| creadas son guardadas como objetos de R de clase tipo function.

...

 |===================                                                |  28%
| En la siguiente pregunta se te pedirá que modifiques un script. Las
| instrucciones de lo que debes hacer se encontrarán en el script. Una vez
| que hayas acabado de modificar el script, guarda tus cambios e ingresa
| submit() en la línea de comandos y así el script será evaluado. Si después
| de hacer esto la línea de comandos te dice que lo vuelvas a intentar y el
| script nuevamente aparece, esto se debe a que debes corregir tu script,
| siéntete libre de hacerlo, solo no olvides ingresar submit() cada vez que
| guardes tus cambios.

...

 |=====================                                              |  31%
| Generalmente el cuerpo de la función es encerrado entre llaves {}, pero no
| es necesario si el cuerpo es una simple expresión. Por ejemplo, la
| expresión sucesor <- function(x) x+1 es equivalente a la que se encuentra
| en el script.

> sucesor <- function(x){}
> sucesor <- function(x) {
+     x + 1
+ }
> sucesor <- function(x) x+1
> sucesor <- function(x) x + 1
> ok()
Error in ok() : could not find function "ok"
> d
Error: object 'd' not found
> sucesor(5)
[1] 6
> submit()

| Leyendo tu script...


| Eso no es precisamente lo que buscaba. Trata otra vez.

| Asegúrate de haber borrado el símbolo # enfrente de la x, para que la
| última expresión sea x + 1.

> submit()

| Leyendo tu script...


| No, ¡casi!, pero no. Intenta de nuevo.

| Asegúrate de haber borrado el símbolo # enfrente de la x, para que la
| última expresión sea x + 1.

> submit()

| Leyendo tu script...


| ¡Buen trabajo!

 |=======================                                            |  34%
| ¡Ahora que has creado tu primera función ¡pruébala! Ingresa sucesor(5) en
| la línea de comandos. Si tu función funciona, debería de regresar
| únicamente el valor 6.

> sucesor(5)
[1] 6

| ¡Lo has logrado! ¡Buen trabajo!

 |=========================                                          |  38%
| ¡Felicidades!, has escrito tu primera función.

...

 |===========================                                        |  41%
| Es importante que sepas que si deseas ver el código fuente de cualquier
| función, solo debes de teclear el nombre de la función sin argumentos ni
| paréntesis. Ahora ve el código fuente de la función que acabas de crear.
| Ingresa sucesor en la línea de comandos.

> sucesor()
Error in sucesor() : argument "x" is missing, with no default
> sucesor
function(x) {
	 x + 1
}
<bytecode: 0x0000000016566520>

| Perseverancia es la respuesta.

 |=============================                                      |  44%
| La definición de una función en R incluye los nombres de los argumentos,
| como en el caso anterior que nombraste a 'x'.Si especificas un valor por
| defecto para un argumento, entonces el argumento será considerado
| opcional.

...

 |===============================                                    |  47%
| Ahora harás un función ligeramente más complicada, donde usarás argumentos
| por defecto. Crearás una función llamada diferencia_cuadrada(). Recuerda
| que para elevar un número a cierta potencia se usa el operador binario
| `^`. Asegúrate de guardar tus cambios antes de ingresar submit() en la
| línea de comandos.

> submit()

| Leyendo tu script...


| ¡No tan bien, pero estás aprendiendo! Intenta de nuevo.

| Recuerda establecer el valor por defecto adecuado.

> submit()

| Leyendo tu script...


| Perseverancia es la respuesta.

 |==================================                                 |  50%
| Ahora prueba tu función diferencia_cuadrada(). Ingresa
| diferencia_cuadrada(3) en la línea de comandos.

> diferencia_cuadrada(3)
[1] 5

| ¡Tu dedicación es inspiradora!

 |====================================                               |  53%
| ¿Qué ha pasado? Como proveíste un solo argumento a la función, R cazó ese
| argumento a 'x', debido a que 'x' es el primer argumento. Por lo que 'y'
| usó el valor por defecto que definiste (2).

...

 |======================================                             |  56%
| Recordarás que en un llamada a función puedes sobrescribir los valores por
| defecto. Así que ahora prueba diferencia_cuadrada() con dos argumentos.
| Ingresa diferencia_cuadrada(10, 5) en la línea de comandos.

> diferencia_cuadrada(10, 5)
[1] 75

| Esa es la respuesta que estaba buscando.

 |========================================                           |  59%
| En R puedes explícitamente nombrar a los argumentos. Por ejemplo ingresa
| diferencia_cuadrada(y = 10, x = 5) en la línea de comandos.

> diferencia_cuadrada(y = 10, x = 5)
[1] -75

| Esa es la respuesta que estaba buscando.

 |==========================================                         |  62%
| Como podrás notar es diferente ingresar diferencia_cuadrada(10, 5) a
| diferencia_cuadrada(y = 10, x = 5).

...

 |============================================                       |  66%
| R también caza parcialmente los argumentos; es decir, ingresar
| diferencia_cuadrada(10, y = 5) resulta en lo mismo que ingresar
| diferencia_cuadrada(x = 10, y = 5) o diferencia_cuadrada(10, 5).

...

 |==============================================                     |  69%
| Si no especificas un valor por defecto para un argumento, y si no
| especificas el valor de ese argumento cuando llamas a la función,
| obtendrás un error si la función intenta usar ese argumento.

...

 |================================================                   |  72%
| Si deseas escribir una función que acepte un número variable de
| argumentos, en R puedes usar '...'; para hacer esto se especifica '...' en
| los argumentos de la función.

...

 |==================================================                 |  75%
| Ahora escribirás una función usando '...'. Cerciórate de guardar tus
| cambios en el script antes de que introduzcas submit().

> submit()

| Leyendo tu script...


| ¡Buen trabajo!

 |====================================================               |  78%
| Ahora prueba tu función numeros_por_vocales. Usa la función
| numeros_por_vocales pasándole como argumentos las cadenas que desees.

> numeros_por_vocales(awsedrftgyhujik)
Error in paste(...) : object 'awsedrftgyhujik' not found
> numeros_por_vocales("awsedrftgyhujik")
[1] "4ws3drftgyhuj1k"

| ¡Sigue trabajando de esa manera y llegarás lejos!

 |======================================================             |  81%
| Muchas funciones en R pueden recibir otras funciones como argumentos. Por
| ejemplo, si deseas saber los argumentos de una función puedes hacer uso de
| las funciones args() o formals(), las cuales reciben como argumento el
| nombre de la función de la que deseas conocer los argumentos.

...

 |=========================================================          |  84%
| Ahora muestra los argumentos de la función mean(), la cual regresa el
| promedio de los elementos que recibe como argumentos. Usa cualquiera de la
| funciones antes mencionadas.

> args(mean)
function (x, ...)
NULL

| ¡Todo ese trabajo está rindiendo frutos!

 |===========================================================        |  88%
| Es importante que sepas que la función args() es usada principalmente de
| modo interactivo para imprimir los argumentos de una función. Para uso en
| programación considera mejor usar formals().

...

 |=============================================================      |  91%
| El concepto de pasar funciones como argumentos es muy poderoso. Completa
| la función operador_binario() para ver cómo funciona. Recuerda guardar tus
| cambios en el script antes de que introduzcas submit().

> submit()

| Leyendo tu script...


| ¡Eres el mejor!

 |===============================================================    |  94%
| Ahora prueba tu función operador_binario(). Ingresa
| operador_binario(`%/%`, 7, 3) en la línea de comandos. Recuerda que el
| operador `%/%` no es más que la división entera en R.

> operador_binario(`%/%`, 7, 3)
[1] 2

| ¡Muy bien!

 |=================================================================  |  97%
| Por último, recuerda que todas las funciones en R regresan un valor.
| Algunas funciones en R además hacen otras cosas, como cambiar el estado de
| las variables, graficar, cargar o guardar archivos, o hasta acceder a la
| red.

...

 |===================================================================| 100%
| Has concluido la lección. ¿Te gustaría que se le notificará a Coursera que
| has completado esta lección?

1: Si
2: No

Selection: 1
Â¿CÃºal es tu nombre de usuario registrado en Coursera (email)? maldo.jota@gmail.com
Â¿CÃºal es tu token de la tarea? wAYGucpxmSixSvXR
Â¡El envÃ­o de la calificaciÃ³n fue satisfactorio!

| Perseverancia es la respuesta.

| ¡Has alcanzado el fin de esta lección! Volviendo al menú principal...

////////////////////////////////////////////////////////////////////////////////

|===========                              |  26%
| Aunque la función lapply() es muy parecida a la
| función apply(), es importante conocer la manera
| de usarla; esto lo puedes hacer conociendo sus
| argumentos. Ahora ve los argumentos de la
| función lapply().

> args(lapply)
function (X, FUN, ...)
NULL

| That's a job well done!

|===========                              |  28%
| Como podrás notar el uso de lapply() es más
| simple que el de apply, puesto que no hace uso
| del argumento MARGIN.

...

|============                             |  30%
| Ahora ve un simple ejemplo de cómo usar lapply.
| Ingresa mayusculas <- lapply(mi_lista, toupper)
| en la línea de comandos.

> mayusculas <- lapply(mi_lista, toupper)

| That's the answer I was looking for.

|=============                            |  31%
| Ahora ve el contenido de 'mayusculas'.

> mayusculas
[[1]]
[1] "INTRODUCCIÓN"

[[2]]
[1] "A"

[[3]]
[1] "LA"

[[4]]
[1] "PROGRAMACIÓN"

[[5]]
[1] "ESTADÍSTICA"

[[6]]
[1] "CON"

[[7]]
[1] "R"


| That's correct!

|=============                            |  33%
| Como recordarás, toupper() regresa la cadena que
| reciba como entrada en mayúsculas. Así que
| lapply simplemente regresa una lista que
| contiene el resultado de aplicar la función
| toupper() a cada elemento de 'mi_lista'.

...

|==============                           |  34%
| Para verificar que lapply efectivamente regresa
| una lista ingresa class(mayusculas).

> class(mayusculas)
[1] "list"

| Keep up the great work!

|===============                          |  36%
| Si ahora ingresas lapply(c("Introduccion", "a",
| "la", "Programacion", "Estadistica", "con",
| "R"), toupper) en la línea de comandos, ¿qué
| crees que ocurra?

1: Que te regrese una lista que contenga las cadenas "INTRODUCCION", "A", "LA", "PROGRAMACION", "ESTADISTICA", "CON", "R"
2: Que te regrese un vector que contenga las cadenas "INTRODUCCION", "A", "LA", "PROGRAMACION", "ESTADISTICA", "CON", "R"
3: Que te mande error

Selection: 3

| One more time. You can do it!


1: Que te mande error
2: Que te regrese un vector que contenga las cadenas "INTRODUCCION", "A", "LA", "PROGRAMACION", "ESTADISTICA", "CON", "R"
3: Que te regrese una lista que contenga las cadenas "INTRODUCCION", "A", "LA", "PROGRAMACION", "ESTADISTICA", "CON", "R"

Selection: 2

| Nice try, but that's not exactly what I was
| hoping for. Try again.


1: Que te regrese una lista que contenga las cadenas "INTRODUCCION", "A", "LA", "PROGRAMACION", "ESTADISTICA", "CON", "R"
2: Que te mande error
3: Que te regrese un vector que contenga las cadenas "INTRODUCCION", "A", "LA", "PROGRAMACION", "ESTADISTICA", "CON", "R"

Selection: 1

| You are quite good my friend!

|===============                          |  38%
| Te regresará una lista que contenga a las
| cadenas "INTRODUCCION", "A", "LA",
| "PROGRAMACION", "ESTADISTICA", "CON", "R" pues
| si recuerdas la función lapply() opera sobre
| listas y vectores y SIEMPRE regresa una lista;
| es fácil que recuerdes esto si piensas que lista
| + apply = lapply.

...

|================                         |  39%
| A partir de ahora trabajarás con el archivo
| ASA_estadisticasPasajeros(3).csv, el cual
| contiene datos estadísticos del año 2015 de
| pasajeros en servicio nacional e internacional
| de la Red Aeropuertos y Servicios Auxiliares de
| México. Con suerte, el archivo se mostrará en
| algún editor. De lo contrario, búscalo en el
| subdirectorio swirl_temp, de tu directorio de
| trabajo y velo en una aplicación separada.

Error: File swirl_temp/ASA_estadisticasPasajeros(3).csv does not exist.
In addition: Warning message:
In file.copy(loc, "swirl_temp", overwrite = TRUE) :
problem copying C:\Users\Juan_Maldonado\Documents\R\win-library\3.4\swirl\Courses\programacion-estadistica-r\Funciones_apply\ASA_estadisticasPasajeros(3).csv to swirl_temp\ASA_estadisticasPasajeros(3).csv: No such file or directory

| Leaving swirl now. Type swirl() to resume.

> swirl()

| Welcome to swirl! Please sign in. If you've been
| here before, use the same name as you did then.
| If you are new, call yourself something unique.

What shall I call you? maldojota

| Would you like to continue with one of these
| lessons?

1: programacion-estadistica-r Funciones apply
2: No. Let me start something new.

Selection: 1


| A partir de ahora trabajarás con el archivo
| ASA_estadisticasPasajeros(3).csv, el cual
| contiene datos estadísticos del año 2015 de
| pasajeros en servicio nacional e internacional
| de la Red Aeropuertos y Servicios Auxiliares de
| México. Con suerte, el archivo se mostrará en
| algún editor. De lo contrario, búscalo en el
| subdirectorio swirl_temp, de tu directorio de
| trabajo y velo en una aplicación separada.

(Se ha copiado el archivo ASA_estadisticasPasajeros(3).csv a la ruta C:/Users/Juan Maldonado/Documents/swirl_temp/ASA_estadisticasPasajeros(3).csv ).
...

|=================                        |  41%
| Como podrás notar el primer renglón del archivo
| contiene los nombres de las columnas. Anio mes
| son representados por una cadena que contiene
| año y mes pegados sin espacios; Código IATA se
| refiere a la sigla utilizada por
| IATA(International Air Transport Association)
| para identificar al aeropuerto; Descripción
| contiene la ciudad donde se encuentra dicho
| aeropuerto; Estado, como su nombre lo indica,
| contiene el nombre del estado donde se encuentra
| dicho aeropuerto; Pasajeros nacionales se
| refiere al número de pasajeros mexicanos que
| hicieron uso del aeropuerto; y Pasajeros
| internacionales se refiere al número de
| pasajeros extranjeros que hicieron uso del
| aeropuerto.

...

|=================                        |  43%
| Ahora importa el archivo
| ASA_estadisticasPasajeros(3).csv usando alguna
| función read.*() y guárdalo en la variable
| ‘asa_datos’. Recuerda que se encuentra en tu
| directorio de trabajo, en la carpeta swirl_temp,
| por lo que la ruta del archivo es
| "swirl_temp/ASA_estadisticasPasajeros(3).csv"

warning messages from top-level task callback 'mini'
Warning message:
In file.copy(loc, "swirl_temp", overwrite = TRUE) :
problem copying C:\Users\Juan_Maldonado\Documents\R\win-library\3.4\swirl\Courses\programacion-estadistica-r\Funciones_apply\ASA_estadisticasPasajeros(3).csv to swirl_temp\ASA_estadisticasPasajeros(3).csv: No such file or directory
>
> asa_datos <-read.csv("swirl_temp/ASA_estadisticasPasajeros(3).csv")

| You're the best!

|==================                       |  44%
| Ahora ve lo que contiene ‘asa_datos’. Para hacer
| esto usarás la función View(). Si te encuentras
| en Rstudio simplemente puedes presionar el
| nombre de tu variable asa_datos en el apartado
| Entorno ("Environment") y se mostrará su
| contenido. Presiona la variable asa_datos en
| Rstudio o ingresa en la línea de comando:
| View(asa_datos).

> View(asa_datos)

| Keep working like that and you'll get there!

|===================                      |  46%
| Como recordarás la familia de funciones read.*()
| te regresan un data frame.

...

|===================                      |  48%
| Los data frames no son más que una lista de
| vectores, así que puedes usar la función lapply()
| con ellos.

...

|====================                     |  49%
| Es importante que cuando trabajes con datos sepas
| un poco más de ellos.

...

|=====================                    |  51%
| Si deseas saber el tipo de variables que contiene
| cada columna del data frame 'asa_datos' basta con
| escribir lapply(asa_datos, class). Ingresa
| lapply(asa_datos, class) en la línea de comandos.

> lapply(asa_datos, class)
$Anio.mes
[1] "integer"

$Codigo.IATA
[1] "factor"

$Descripcion
[1] "factor"

$Estado
[1] "factor"

$Pasajeros.nacionales
[1] "integer"

$Pasajeros.internacionales
[1] "integer"


| You got it right!

|======================                   |  52%
| Como podrás notar, el data frame contiene dos
| tipos de datos: enteros (Anio.mes,
| Pasajeros.nacionales y Pasajeros.internacionales)
| y factores (Codigo.IATA, Descripcion y Estado).

...

|======================                   |  54%
| Como recordarás los factores son una colección
| ordenada de elementos. Son usados en R para
| representar valores categóricos. Si haces un poco
| de memoria recordarás que los valores que un
| factor puede tomar se llaman niveles ("levels").

...

|=======================                  |  56%
| A la hora de trabajar con factores es importante
| que conozcas los niveles que los datos pueden
| tomar.

...

|========================                 |  57%
| Si deseas conocer los niveles que las columnas
| del data frame pueden tomar, los puedes conocer
| al imprimir dicha columna. Por ejemplo, ingresa
| asa_datos$Descripcion en la línea de comandos
| para conocer las ciudades que contienen
| aeropuertos pertenecientes a la Red Aeropuertos y
| Servicios Auxiliares de México.

> asa_datos$Descripcion
[1] Ciudad Obregon    Colima
[3] Ciudad del Carmen Campeche
[5] Chetumal          Ciudad Victoria
[7] Guaymas           Loreto
[9] Matamoros         Nuevo Laredo
[11] Nogales           Poza Rica
[13] Puebla            Puerto Escondido
[15] Tehuacan          Tepic
[17] Tamuin            Uruapan
[19] Ciudad Obregon    Colima
[21] Ciudad del Carmen Campeche
[23] Chetumal          Ciudad Victoria
[25] Guaymas           Loreto
[27] Matamoros         Nuevo Laredo
[29] Nogales           Poza Rica
[31] Puebla            Puerto Escondido
[33] Tehuacan          Tepic
[35] Tamuin            Uruapan
[37] Ciudad Obregon    Colima
[39] Ciudad del Carmen Campeche
[41] Chetumal          Ciudad Victoria
[43] Guaymas           Loreto
[45] Matamoros         Nuevo Laredo
[47] Nogales           Poza Rica
[49] Puebla            Puerto Escondido
[51] Tehuacan          Tepic
[53] Tamuin            Uruapan
[55] Ciudad Obregon    Colima
[57] Ciudad del Carmen Campeche
[59] Chetumal          Ciudad Victoria
[61] Guaymas           Loreto
[63] Matamoros         Nuevo Laredo
[65] Nogales           Poza Rica
[67] Puebla            Puerto Escondido
[69] Tehuacan          Tepic
[71] Tamuin            Uruapan
[73] Ciudad Obregon    Colima
[75] Ciudad del Carmen Campeche
[77] Chetumal          Ciudad Victoria
[79] Guaymas           Loreto
[81] Matamoros         Nuevo Laredo
[83] Nogales           Poza Rica
[85] Puebla            Puerto Escondido
[87] Tehuacan          Tepic
[89] Tamuin            Uruapan
[91] Ciudad Obregon    Colima
[93] Ciudad del Carmen Campeche
[95] Chetumal          Ciudad Victoria
[97] Guaymas           Loreto
[99] Matamoros         Nuevo Laredo
[101] Nogales           Poza Rica
[103] Puebla            Puerto Escondido
[105] Tehuacan          Tepic
[107] Tamuin            Uruapan
[109] Ciudad Obregon    Colima
[111] Ciudad del Carmen Campeche
[113] Chetumal          Ciudad Victoria
[115] Guaymas           Loreto
[117] Matamoros         Nuevo Laredo
[119] Nogales           Poza Rica
[121] Puebla            Puerto Escondido
[123] Tehuacan          Tepic
[125] Tamuin            Uruapan
[127] Ciudad Obregon    Colima
[129] Ciudad del Carmen Campeche
[131] Chetumal          Ciudad Victoria
[133] Guaymas           Loreto
[135] Matamoros         Nuevo Laredo
[137] Nogales           Poza Rica
[139] Puebla            Puerto Escondido
[141] Tehuacan          Tepic
[143] Tamuin            Uruapan
[145] Ciudad Obregon    Colima
[147] Ciudad del Carmen Campeche
[149] Chetumal          Ciudad Victoria
[151] Guaymas           Loreto
[153] Matamoros         Nuevo Laredo
[155] Nogales           Poza Rica
[157] Puebla            Puerto Escondido
[159] Tehuacan          Tepic
[161] Tamuin            Uruapan
[163] Ciudad Obregon    Colima
[165] Ciudad del Carmen Campeche
[167] Chetumal          Ciudad Victoria
[169] Guaymas           Loreto
[171] Matamoros         Nuevo Laredo
[173] Nogales           Poza Rica
[175] Puebla            Puerto Escondido
[177] Tehuacan          Tepic
[179] Tamuin            Uruapan
[181] Ciudad Obregon    Colima
[183] Ciudad del Carmen Campeche
[185] Chetumal          Ciudad Victoria
[187] Guaymas           Loreto
[189] Matamoros         Nuevo Laredo
[191] Nogales           Poza Rica
[193] Puebla            Puerto Escondido
[195] Tehuacan          Tepic
[197] Tamuin            Uruapan
[199] Ciudad Obregon    Colima
[201] Ciudad del Carmen Campeche
[203] Chetumal          Ciudad Victoria
[205] Guaymas           Loreto
[207] Matamoros         Nuevo Laredo
[209] Nogales           Poza Rica
[211] Puebla            Puerto Escondido
[213] Tehuacan          Tepic
[215] Tamuin            Uruapan
18 Levels: Campeche Chetumal ... Uruapan

| Perseverance, that's the answer.

|========================                 |  59%
| Como podrás notar esto presentó todos los valores
| de la columna Descripcion aun estando repetidos.
| Al final se muestran todos los niveles en donde
| dice "Levels:" pero al ser muchos R mostró
| algunos y los demás los omitió usando "...".

...

|=========================                |  61%
| Una manera de poder ver todos los niveles aun
| cuando sean muchos es usando la función unique().
| La función unique() elimina duplicados. Ingresa
| unique(asa_datos$Descripcion) en la línea de
| comandos.

> unique(asa_datos$Descripcion
+ )
[1] Ciudad Obregon    Colima
[3] Ciudad del Carmen Campeche
[5] Chetumal          Ciudad Victoria
[7] Guaymas           Loreto
[9] Matamoros         Nuevo Laredo
[11] Nogales           Poza Rica
[13] Puebla            Puerto Escondido
[15] Tehuacan          Tepic
[17] Tamuin            Uruapan
18 Levels: Campeche Chetumal ... Uruapan

| You're the best!

|==========================               |  62%
| Ahora ya conoces las ciudades con aeropuertos
| pertenecientes a la red ASA.

...

|==========================               |  64%
| Repite el proceso pero ahora para conocer los
| valores de la columna Estado.

> unique(asa_datos$Estado)
[1] Sonora               Colima
[3] Campeche             Quintana Roo
[5] Tamaulipas           Baja California  Sur
[7] Veracruz             Puebla
[9] Oaxaca               Nayarit
[11] San Luis Potosi      Michoacan
12 Levels: Baja California  Sur Campeche ... Veracruz

| You are doing so well!

|===========================              |  66%
| Ahora deseas saber el número total de pasajeros
| nacionales que viajaron en alguno de los
| aeropuertos pertenecientes a la red ASA. Para
| hacer esto simplemente puedes sumar todos los
| elementos de la columna de Pasajeros.nacionales.
| Ingresa sum(asa_datos$Pasajeros.nacionales) en la
| línea de comandos.

> sum(asa_datos$Pasajeros.nacionales)
[1] 2291419

| That's a job well done!

|============================             |  67%
| La función sum() regresa la suma de todos los
| elementos que recibe como argumentos.

...

|============================             |  69%
| Ahora deseas obtener el número total de pasajeros
| internacionales.

...

|=============================            |  70%
| Podrías repetir la operación que hiciste para
| obtener el número total de pasajeros
| nacionales...

...

|==============================           |  72%
| O podrías usar la función lapply() y automatizar
| la operación para obtener el número total de
| ambos pasajeros.

...

|==============================           |  74%
| Primero crea un subconjunto de asas_datos,
| ingresa asa_pasajeros <-
| asa_datos[,c("Pasajeros.nacionales",
| "Pasajeros.internacionales")] en la línea de
| comandos. Con esto obtendrás las columnas de
| pasajeros.

> asa_pasajeros <-asa_datos[,c("Pasajeros.nacionales","Pasajeros.internacionales")]

| You got it!

|===============================          |  75%
| Ahora ve lo que contiene ‘asa_pasajeros’. Para
| hacer esto usarás la función View(). Si te
| encuentras en Rstudio simplemente puedes
| presionar el nombre de la variable asa_pasajeros
| en el apartado Entorno ("Environment") y se
| mostrará su contenido. Presiona la variable
| asa_pasajeros en Rstudio o ingresa
| View(asa_pasajeros) en la línea de comandos.

> asa_pasajeros
	Pasajeros.nacionales Pasajeros.internacionales
1                  17149                       721
2                   8486                       124
3                  56079                      3126
4                  13264                       215
5                  13153                         0
6                   4695                       139
7                   1315                       386
8                   1050                      2684
9                   6684                        61
10                  5609                        10
11                   257                        37
12                  4490                         0
13                 20794                      4723
14                 16754                       580
15                   153                         0
16                  8116                         0
17                   108                         0
18                  8227                      1208
19                 15430                       700
20                  9207                        67
21                 48255                      2632
22                 12797                       206
23                 11110                         6
24                  4902                       163
25                  1000                       336
26                   651                      4511
27                  6443                        55
28                  5541                        55
29                   204                        38
30                  5368                         0
31                 16316                      3539
32                 11146                       431
33                   250                         0
34                  7062                         0
35                   205                         0
36                  5581                       920
37                 20272                       632
38                  8906                        85
39                 50333                      2678
40                 15863                       304
41                 13651                         2
42                  8116                       185
43                  1170                       556
44                   793                      5418
45                  7219                        89
46                  6116                        16
47                   295                        54
48                  5756                         0
49                 21621                      4421
50                 15527                       357
51                   296                         0
52                  8953                         0
53                   172                         0
54                  6588                      1037
55                 19649                       539
56                  8698                        70
57                 47173                      2650
58                 13750                       264
59                 14271                        22
60                  5714                       111
61                  1322                       303
62                  1708                      5376
63                  7838                        85
64                  5221                        35
65                   270                        39
66                  5410                         0
67                 21948                      4347
68                 15546                       348
69                   249                         0
70                  8664                         0
71                    89                         0
72                  6993                      1348
73                 19878                       582
74                  8827                        80
75                 49967                      3287
76                 14788                       258
77                 13762                         9
78                  5511                       173
79                  1199                       457
80                   884                      4744
81                  8056                        94
82                  5508                         7
83                   342                        23
84                  5130                         0
85                 22044                      4145
86                 11401                       356
87                   337                         0
88                  9437                         0
89                   158                         0
90                  7589                      1137
91                 18854                       590
92                  9082                        56
93                 48395                      2761
94                 13490                       180
95                 14339                         2
96                  8113                       115
97                  1063                       314
98                   890                      3787
99                  7819                        56
100                 5481                         8
101                  268                        12
102                 5450                         0
103                22209                      4628
104                11025                       178
105                  211                         0
106                 9027                         0
107                   89                         0
108                 8568                      1193
109                21570                       487
110                10033                       106
111                50061                      2800
112                16645                       237
113                15958                        10
114                 5404                       108
115                 1197                       186
116                 1135                      3247
117                 8553                        38
118                 7499                        29
119                  192                        29
120                 5501                         0
121                26609                      5315
122                18641                       236
123                  239                         0
124                10253                         0
125                  162                         0
126                 9260                      1490
127                20323                       456
128                 9536                        82
129                44891                      2573
130                15269                       310
131                16071                        30
132                 5372                       134
133                  905                       110
134                  952                      2908
135                 8696                        56
136                 5857                        54
137                  131                         7
138                 5021                         0
139                24785                      7042
140                18267                       209
141                  164                         0
142                 9767                         0
143                  187                         0
144                 9730                      1197
145                17764                       473
146                 7267                        60
147                44283                      2227
148                14174                       240
149                14628                        12
150                 6408                        82
151                  772                       280
152                  887                      1485
153                 8418                        96
154                 6684                        13
155                   98                         7
156                 4276                         0
157                20393                      6104
158                12717                       154
159                  174                         0
160                 7739                         0
161                  139                         0
162                 6635                       985
163                20647                       527
164                 8417                        59
165                48342                      2534
166                16618                       283
167                15171                         7
168                 7827                       120
169                  891                       427
170                 1245                      2996
171                 8955                         8
172                 7174                        11
173                  156                        22
174                 4666                         0
175                22396                      6278
176                13491                       175
177                  252                         0
178                 8466                         0
179                   63                         0
180                 7475                      1352
181                22540                       630
182                11902                        72
183                46957                      2300
184                15722                       310
185                18315                         8
186                 5391                       165
187                  871                       498
188                 1009                      4098
189                 9845                        62
190                 5748                        39
191                  172                        41
192                 4928                         0
193                22624                      6364
194                15320                       306
195                  263                         0
196                11416                         0
197                   91                         0
198                 8619                      1120
199                24333                       746
200                12295                        66
201                56418                      2432
202                16330                       234
203                18830                        10
204                 6038                       170
205                 1052                       285
206                 1398                      4051
207                 8421                         7
208                 6250                        13
209                  237                        46
210                 4579                         0
211                23016                      6150
212                21871                       294
213                  224                         0
214                14143                         0
215                  135                         0
216                10370                      1445

| Not quite right, but keep trying. Or, type info()
| for more options.

> View(asa_pasajeros)

| Keep up the great work!

|================================         |  77%
| Y ahora usa la función lapply() para obtener el
| número total de pasajeros de ambas columna.
| Ingresa lapply(asa_pasajeros, sum) en la línea de
| comandos.

> lapply(asa_pasajeros, sum)
$Pasajeros.nacionales
[1] 2291419

$Pasajeros.internacionales
[1] 176741


| You are really on a roll!

|================================         |  79%
| Esto te dice que se registraron un total de 2 291
| 419 pasajeros nacionales y 176 741 pasajeros
| internacionales.

...

|=================================        |  80%
| Como recordarás, las listas son útiles para
| guardar objetos de múltiples clases. Pero en este
| caso el resultado de aplicar sum() fue un entero
| por columna; podrías guardar el resultado en
| alguna otra estructura.

...

|==================================       |  82%
| sapply() te permite simplificar este proceso;
| sapply funciona como lapply(), pero intenta
| simplificar la salida a la estructura de datos
| más elemental que sea posible. De ahí su nombre
| simple + apply = sapply.

...

|==================================       |  84%
| Ahora usa sapply() para obtener el número total
| de pasajeros nacionales e internacionales de la
| misma manera que lo hiciste con lapply() y guarda
| el resultado en la variable 'total_pasajeros'.

> total_pasajeros<-sapply(asa_pasajeros,sum)

| You are really on a roll!

|===================================      |  85%
| Ahora ve el contenido de 'total_pasajeros'.

> total_pasajeros
	 Pasajeros.nacionales Pasajeros.internacionales
								2291419                    176741

| That's a job well done!

|====================================     |  87%
| Como notarás 'total_pasajeros' no es una lista;
| esto se debe a que a sapply() simplificó el
| resultado a un vector de enteros.

...

|====================================     |  89%
| En general, si el resultado de lapply() es una
| lista donde cada elemento es de longitud 1,
| sapply() regresará un vector. Si el resultado es
| una lista donde cada elemento es un vector de la
| misma longitud (> 1), sapply() regresará una
| matriz. Si sapply() no puede arreglárselas,
| entonces regresará una lista, lo cual no sería
| diferente al resultado de usar lapply().

...

|=====================================    |  90%
| Algunas veces encontrarás que los datos
| proporcionados tienen una granularidad muy fina
| para el tipo de análisis que estás realizando.
| Por ejemplo supón que deseas saber el número
| total de pasajeros nacionales por estado. Para
| encontrar ese número, tendrás que agrupar los
| aeropuertos por estado e ir sumando los números
| de pasajeros nacionales. Esta tarea puede
| volverse un poco conflictiva debido a que la
| información la tienes dividida por meses.

...

|======================================   |  92%
| Como recordarás, la columna Estados solo puede
| tomar los valores Sonora, Colima, Campeche,
| Quintana Roo, Tamaulipas, Baja California Sur,
| Veracruz, Puebla, Oaxaca, Nayarit, San Luis
| Potosí y Michoacán. Para ver cuántos registros
| tiene cada estado ingresa table(asa_datos$Estado)
| en la línea de comandos.

> table(asa_datos$Estado)

Baja California  Sur             Campeche
								12                   24
						Colima            Michoacan
								12                   12
					 Nayarit               Oaxaca
								12                   12
						Puebla         Quintana Roo
								24                   12
	 San Luis Potosi               Sonora
								12                   36
				Tamaulipas             Veracruz
								36                   12

| You're the best!

|======================================   |  93%
| Como te podrás dar cuenta cada estado tiene un
| número múltiplo de 12 registros; esto se debe a
| que los registros por aeropuerto están divididos
| por mes.

...

|=======================================  |  95%
| Pensando en que algunas veces tendrás la
| información con una granularidad muy fina para el
| tipo de análisis que deseas realizar, R
| proporciona la función tapply(), la cual divide
| datos en grupos, basados en valor de alguna
| variable y luego aplica la función especificada a
| los miembros de cada grupo.

...

|======================================== |  97%
| Ingresa tapply(asa_datos$Pasajeros.nacionales,
| asa_datos$Estado, sum) para obtener el número de
| pasajeros nacionales por estado.

> tapply(asa_datos$Pasajeros.nacionales,asa_datos$Estado, sum)
Baja California  Sur             Campeche
						 12602               769864
						Colima            Michoacan
						112656                95635
					 Nayarit               Oaxaca
						113043               181706
						Puebla         Quintana Roo
						267567               179259
	 San Luis Potosi               Sonora
							1598               253788
				Tamaulipas             Veracruz
						243126                60575

| Great job!

|======================================== |  98%
| Ahora obtén el promedio o media de pasajeros
| nacionales que viajaron por mes en cada
| aeropuerto. Recuerda que para calcular la media
| puedes usar la función mean().

> tapply(asa_datos$Pasajeros.nacionales,asa_datos$Estado, mean)
Baja California  Sur             Campeche
				 1050.1667           32077.6667
						Colima            Michoacan
				 9388.0000            7969.5833
					 Nayarit               Oaxaca
				 9420.2500           15142.1667
						Puebla         Quintana Roo
				11148.6250           14938.2500
	 San Luis Potosi               Sonora
					133.1667            7049.6667
				Tamaulipas             Veracruz
				 6753.5000            5047.9167

| Try again. Getting it right on the first try is
| boring anyway! Or, type info() for more options.

| Ingresa tapply(asa_datos$Pasajeros.nacionales,
| asa_datos$Codigo.IATA, mean) en la línea de
| comandos para conocer la media de pasajeros
| nacionales que viajaron por mes en cada
| aeropuerto.

> tapply(asa_datos$Pasajeros.nacionales,asa_datos$Codigo.IATA, mean)
		 CEN        CLQ        CME        CPE
19867.4167  9388.0000 49262.8333 14892.5000
		 CTM        CVM        GYM        LTO
14938.2500  6124.2500  1063.0833  1050.1667
		 MAM        NLD        NOG        PAZ
8078.9167  6057.3333   218.5000  5047.9167
		 PBC        PXM        TCN        TPQ
22062.9167 15142.1667   234.3333  9420.2500
		 TSL        UPN
133.1667  7969.5833

| All that hard work is paying off!

|=========================================| 100%
| Has concluido la lección. ¿Te gustaría que se le
| notificará a Coursera que has completado esta
| lección?

1: No
2: Si

Selection: 2
Â¿CÃºal es tu nombre de usuario registrado en Coursera (email)? maldo.jota@gmail.com
Â¿CÃºal es tu token de la tarea? aJsfLtLBWLWorDPQ
Â¡El envÃ­o de la calificaciÃ³n fue satisfactorio!


////////////////////////////////////////////////////////////////////////////////

...

  |=                                                             |   1%
| Si estás familiarizado con Microsoft Excel, encontrarás que R puede
| generar todas las gráficas con las que estás familiarizado: gráficas
| de pastel, gráficas de barras, etc. Además, hay muchos más tipos de
| gráficas disponibles en R.

...

  |==                                                            |   3%
| Para empezar ve las gráficas básicas que se pueden producir. Ingresa
| demo(graphics) en la línea de comandos, y después presiona Enter para
| comenzar y para cambiar de gráfica. SI PRESENTAS ALGÚN ERROR ingresa
| ok() en la línea de comandos.

> demo(graphics)


	demo(graphics)
	---- ~~~~~~~~

Type  <Return>	 to start :

> #  Copyright (C) 1997-2009 The R Core Team
>
> require(datasets)

> require(grDevices); require(graphics)

> ## Here is some code which illustrates some of the differences between
> ## R and S graphics capabilities.  Note that colors are generally specified
> ## by a character string name (taken from the X11 rgb.txt file) and that line
> ## textures are given similarly.  The parameter "bg" sets the background
> ## parameter for the plot and there is also an "fg" parameter which sets
> ## the foreground color.
>
>
> x <- stats::rnorm(50)

> opar <- par(bg = "white")

> plot(x, ann = FALSE, type = "n")
Hit <Return> to see next plot:

> abline(h = 0, col = gray(.90))

> lines(x, col = "green4", lty = "dotted")

> points(x, bg = "limegreen", pch = 21)

> title(main = "Simple Use of Color In a Plot",
+       xlab = "Just a Whisper of a Label",
+       col.main = "blue", col.lab = gray(.8),
+       cex.main = 1.2, cex.lab = 1.0, font.main = 4, font.lab = 3)

> ## A little color wheel.	 This code just plots equally spaced hues in
> ## a pie chart.	If you have a cheap SVGA monitor (like me) you will
> ## probably find that numerically equispaced does not mean visually
> ## equispaced.  On my display at home, these colors tend to cluster at
> ## the RGB primaries.  On the other hand on the SGI Indy at work the
> ## effect is near perfect.
>
> par(bg = "gray")

> pie(rep(1,24), col = rainbow(24), radius = 0.9)
Hit <Return> to see next plot:

> title(main = "A Sample Color Wheel", cex.main = 1.4, font.main = 3)

> title(xlab = "(Use this as a test of monitor linearity)",
+       cex.lab = 0.8, font.lab = 3)

> ## We have already confessed to having these.  This is just showing off X11
> ## color names (and the example (from the postscript manual) is pretty "cute".
>
> pie.sales <- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)

> names(pie.sales) <- c("Blueberry", "Cherry",
+ 		      "Apple", "Boston Cream", "Other", "Vanilla Cream")

> pie(pie.sales,
+     col = c("purple","violetred1","green3","cornsilk","cyan","white"))
Hit <Return> to see next plot:

> title(main = "January Pie Sales", cex.main = 1.8, font.main = 1)

> title(xlab = "(Don't try this at home kids)", cex.lab = 0.8, font.lab = 3)

> ## Boxplots:  I couldn't resist the capability for filling the "box".
> ## The use of color seems like a useful addition, it focuses attention
> ## on the central bulk of the data.
>
> par(bg="cornsilk")

> n <- 10

> g <- gl(n, 100, n*100)

> x <- rnorm(n*100) + sqrt(as.numeric(g))

> boxplot(split(x,g), col="lavender", notch=TRUE)
Hit <Return> to see next plot:

> title(main="Notched Boxplots", xlab="Group", font.main=4, font.lab=1)

> ## An example showing how to fill between curves.
>
> par(bg="white")

> n <- 100

> x <- c(0,cumsum(rnorm(n)))

> y <- c(0,cumsum(rnorm(n)))

> xx <- c(0:n, n:0)

> yy <- c(x, rev(y))

> plot(xx, yy, type="n", xlab="Time", ylab="Distance")
Hit <Return> to see next plot:

> polygon(xx, yy, col="gray")

> title("Distance Between Brownian Motions")

> ## Colored plot margins, axis labels and titles.	 You do need to be
> ## careful with these kinds of effects.	It's easy to go completely
> ## over the top and you can end up with your lunch all over the keyboard.
> ## On the other hand, my market research clients love it.
>
> x <- c(0.00, 0.40, 0.86, 0.85, 0.69, 0.48, 0.54, 1.09, 1.11, 1.73, 2.05, 2.02)

> par(bg="lightgray")

> plot(x, type="n", axes=FALSE, ann=FALSE)
Hit <Return> to see next plot:

> usr <- par("usr")

> rect(usr[1], usr[3], usr[2], usr[4], col="cornsilk", border="black")

> lines(x, col="blue")

> points(x, pch=21, bg="lightcyan", cex=1.25)

> axis(2, col.axis="blue", las=1)

> axis(1, at=1:12, lab=month.abb, col.axis="blue")

> box()

> title(main= "The Level of Interest in R", font.main=4, col.main="red")

> title(xlab= "1996", col.lab="red")

> ## A filled histogram, showing how to change the font used for the
> ## main title without changing the other annotation.
>
> par(bg="cornsilk")

> x <- rnorm(1000)

> hist(x, xlim=range(-4, 4, x), col="lavender", main="")
Hit <Return> to see next plot:

> title(main="1000 Normal Random Variates", font.main=3)

> ## A scatterplot matrix
> ## The good old Iris data (yet again)
>
> pairs(iris[1:4], main="Edgar Anderson's Iris Data", font.main=4, pch=19)
Hit <Return> to see next plot:

> pairs(iris[1:4], main="Edgar Anderson's Iris Data", pch=21,
+       bg = c("red", "green3", "blue")[unclass(iris$Species)])
Hit <Return> to see next plot:

> ## Contour plotting
> ## This produces a topographic map of one of Auckland's many volcanic "peaks".
>
> x <- 10*1:nrow(volcano)

> y <- 10*1:ncol(volcano)

> lev <- pretty(range(volcano), 10)

> par(bg = "lightcyan")

> pin <- par("pin")

> xdelta <- diff(range(x))

> ydelta <- diff(range(y))

> xscale <- pin[1]/xdelta

> yscale <- pin[2]/ydelta

> scale <- min(xscale, yscale)

> xadd <- 0.5*(pin[1]/scale - xdelta)

> yadd <- 0.5*(pin[2]/scale - ydelta)

> plot(numeric(0), numeric(0),
+      xlim = range(x)+c(-1,1)*xadd, ylim = range(y)+c(-1,1)*yadd,
+      type = "n", ann = FALSE)
Hit <Return> to see next plot:

> usr <- par("usr")

> rect(usr[1], usr[3], usr[2], usr[4], col="green3")

> contour(x, y, volcano, levels = lev, col="yellow", lty="solid", add=TRUE)

> box()

> title("A Topographic Map of Maunga Whau", font= 4)

> title(xlab = "Meters North", ylab = "Meters West", font= 3)

> mtext("10 Meter Contour Spacing", side=3, line=0.35, outer=FALSE,
+       at = mean(par("usr")[1:2]), cex=0.7, font=3)

> ## Conditioning plots
>
> par(bg="cornsilk")

> coplot(lat ~ long | depth, data = quakes, pch = 21, bg = "green3")
Hit <Return> to see next plot:
Error in plot.new() : figure margins too large
>
> ok()

| That's a job well done!

  |===                                                           |   4%
| Como pudiste observar, R es muy bueno a la hora de graficar.

...

  |====                                                          |   6%
| El sistema base de gráficos de R cuenta con tres tipos básicos de
| funciones: funciones de alto nivel, funciones de bajo nivel y
| funciones interactivas.

...

  |=====                                                         |   7%
| Las funciones de alto nivel generan gráficas preestablecidas.

...

  |======                                                        |   9%
| Las funciones de bajo nivel añaden información a un gráfico
| existente.

...

  |======                                                        |  10%
| Y las funciones interactivas te permiten de forma interactiva añadir
| información o extraer información de gráficos. Este curso sólo
| cubrirá las funciones de alto nivel y bajo nivel.

...

  |=======                                                       |  12%
| Comienza explorando las funciones de alto nivel.

...

  |========                                                      |  13%
| Las funciones de alto nivel están diseñadas para generar un gráfico a
| partir de la información pasada como argumentos de la función.

...

  |=========                                                     |  15%
| La función plot() es una de las funciones de alto nivel más
| comúnmente usada.

...

  |==========                                                    |  16%
| Comienza a jugar con ella. Ingresa plot(1:5) en la línea de comandos.

> plot(1:5)
Hit <Return> to see next plot:

| Nice work!

  |===========                                                   |  18%
| Al ingresar plot(1:5) has graficado cada elemento del vector 1:5 (1,
| 2, 3, 4, 5) contra la posición en dicho vector de cada elemento; es
| decir, graficaste los puntos (1, 1), (2, 2), (3, 3), (4, 4) y (5, 5).

...

  |============                                                  |  19%
| Es importante saber que plot() es una función genérica, por lo que
| graficará dependiendo del objeto que le sea pasado como entrada.

...

  |=============                                                 |  21%
| Ve qué pasa si ahora introduces plot(c(1, 2, 3), c(4, 5, 6)) en la
| línea de comandos.

> plot(c(1, 2, 3), c(4, 5, 6))
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| You're the best!

  |==============                                                |  22%
| Como notarás, esta vez introdujiste dos vectores como entrada, cada
| uno con tres elementos. Entonces la gráfica fue construida tomando un
| elemento del primer vector (posición x) y un elemento del segundo
| vector (posición y) para construir cada punto, los cuales son: (1,
| 4), (2, 5) y (3, 6).

...

  |===============                                               |  24%
| Conoce más del uso de plot(). Ingresa ?plot en la línea de comandos.

> ?plot

| That's correct!

  |================                                              |  25%
| Como ya te habrás dado cuenta plot() recibe dos argumentos
| principales.

...

  |=================                                             |  27%
| El primero, x, representa las coordenadas en el eje X de los puntos
| en la gráfica, o alternativamente una única estructura para graficar,
| una función o cualquier objeto de R que provea un método para
| graficar.

...

  |==================                                            |  28%
| El segundo, y, representa las coordenadas en el eje Y de los puntos
| de la gráfica. Pero este argumento es OPCIONAL, pues sólo es
| necesario si x no es una estructura apropiada.

...

  |===================                                           |  30%
| Y esto explica por qué puedes graficar si le pasas uno o dos vectores
| como entrada. En el primer caso (1:5) le envías una estructura
| apropiada; en el segundo le envías las coordenadas de los puntos en
| 'x' y 'y' por medio de dos vectores (c(1, 2, 3) y c(4, 5, 6)).

...

  |===================                                           |  31%
| Además, plot() recibe '...' como argumento, pues no en todos los
| casos recibirá los mismos argumentos adicionales; esto se debe a que
| plot() es una función genérica.

...

  |====================                                          |  33%
| Pero la mayoría de las veces acepta los siguientes argumentos: type,
| main, sub, xlab, ylab y asp.

...

  |=====================                                         |  34%
| type sirve para especificar qué tipo de gráfica debe trazar. Los
| valores que puede tomar son: "p" para puntos, "l" para líneas, "b"
| para ambas (líneas y punto), "c" para la parte de líneas que se
| muestra usando "b", "o" para ambas (líneas y puntos) ‘sobrepuestas’,
| "h" para ‘histograma’ como líneas verticales (o ‘alta densidad’), "s"
| para escalonado, "S" para otro tipo de escalonamiento y "n" para no
| graficar.

...

  |======================                                        |  36%
| Como te habrás dado cuenta, cuando graficas plot(c(1, 2, 3), c(4, 5,
| 6)) el tipo de gráfica por defecto fue puntos. Ahora ingresa
| plot(c(1, 2, 3), c(4, 5, 6), type="l") en la línea de comandos para
| usar líneas.

>
> plot(c(1, 2, 3), c(4, 5, 6), type="l")
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| Keep up the great work!

  |=======================                                       |  37%
| Ahora grafica el vector 6:10 de forma escalonada.

> plot(c(1, 2, 3), c(4, 5, 6), type="l")
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| One more time. You can do it! Or, type info() for more options.

> plot(6:10, type="s")
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| You are amazing!

  |========================                                      |  39%
| Para continuar grafica el vector 1:10 usando ambas (líneas y puntos).

> plot(1:10, type="b")
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| That's correct!

  |=========================                                     |  40%
| El argumento main establece el título de la gráfica. ¡Pruébalo!
| Introduce plot(1:5, main="Mi gráfica") en la línea de comandos.

> plot(1:5, main="Mi gráfica")
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| Keep up the great work!

  |==========================                                    |  42%
| Análogamente sub establece el subtítulo de la gráfica.

...

  |===========================                                   |  43%
| El argumento xlab establece un título para el eje X de la gráfica.
| Análogamente ylab para el eje Y. Establece "x" como título del eje X
| y "y" como título del eje Y en la gráfica anterior.

> plot(1:5, main="Mi gráfica",xlab = "x",ylab = "y")
Hit <Return> to see next plot:
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| You are doing so well!

  |============================                                  |  45%
| asp se refiere a la proporción x/y.

...

  |=============================                                 |  46%
| Algunas veces las funciones estándar para graficar no producirán
| exactamente el tipo de gráfica que deseas. En estos casos las
| funciones para graficar de bajo nivel pueden ser usadas para añadir
| información extra a la actual gráfica, como lo son puntos, líneas o
| texto.

...

  |==============================                                |  48%
| Una de ellas es la función points(). Con la función points() tú
| puedes graficar puntos sobre una gráfica. Ingresa points(c(1, 5),
| c(4, 2), col="green") en la línea de comandos para graficar los
| puntos (1, 4) y (5, 2).

> points(c(1, 5),c(4, 2), col="green"
+ )

| All that practice is paying off!

  |===============================                               |  49%
| Como puedes notar, esto puede ser muy útil para añadir un conjunto
| adicional de puntos a una gráfica existente. Usualmente con un color
| diferente o un símbolo diferente.

...

  |===============================                               |  51%
| La mayoría de los argumentos de la función plot() aplican para
| función points(), incluyendo 'x' y opcionalmente 'y'. Pero los
| argumentos más útiles son: col para especificar el color del borde
| para los puntos a graficar, bg para especificar el color de relleno
| de los puntos a graficar, pch para especificar el símbolo que se
| usará para graficar al punto.

...

  |================================                              |  52%
| Otra función muy útil es la función lines(). Ingresa lines(c(1, 4),
| c(2, 5), col="yellow") en la línea de comandos.

> lines(c(1, 4),c(2, 5), col="yellow")

| Excellent work!

  |=================================                             |  54%
| La función lines() grafica un conjunto de segmentos de línea sobre
| una gráfica existente. Al igual que la función points(), muchos
| argumentos de plot() aplican para lines(). Los valores de 'x' y 'y'
| especifican las intersecciones entre los segmentos de línea.

...

  |==================================                            |  55%
| Para trazar una sola línea a través del área de la gráfica, puedes
| utilizar la función abline(). Por lo general, se llama abline() para
| dibujar una sola línea. Por ejemplo, ingresa
| abline(h=3,col="red",lty=2) en la línea de comandos.

> abline(h=3,col="red",lty=2)

| You are amazing!

  |===================================                           |  57%
| Como notarás, graficaste una línea horizontal en y=3. Para graficar
| una línea vertical en x=3, basta con ingresar
| abline(v=3,col="red",lty=2) en la línea de comandos.

...

  |====================================                          |  58%
| También puedes especificar múltiples argumentos y abline() graficará
| las líneas especificadas. Por ejemplo, ingresa abline(h=1:5,v=1:5,
| col="purple") en la línea de comandos para graficar una cuadrícula de
| líneas entre 1 y 10.

> abline(h=1:5,v=1:5,col="purple")

| That's the answer I was looking for.

  |=====================================                         |  60%
| Aunque si deseas graficar una cuadrícula en tu gráfica, es mejor que
| uses la función grid().

...

  |======================================                        |  61%
| Hasta ahora sólo has trabajado con datos ficticios. Para hacer esto
| más interesante trabajarás con datos reales a partir de este momento.

...

  |=======================================                       |  63%
| Usarás el famoso conjunto de datos iris, el cual contiene las medidas
| en centímetros de longitud y ancho de ambos sépalo y pétalo de tres
| especies de iris (setosa, versicolor y virginica) con 50 ejemplares
| cada una.

...

  |========================================                      |  64%
| Para cargar el conjunto de datos iris, ingresa data("iris") en la
| línea de comandos.

> data("iris")}
Error: unexpected '}' in "data("iris")}"
> data("iris")

| You got it!

  |=========================================                     |  66%
| Como notarás, el objeto iris fue cargado. Averigua qué tipo de objeto
| es iris.

> class(iris)
[1] "data.frame"

| You nailed it! Good job!

  |==========================================                    |  67%
| Como verás, iris es un data frame. Ingresa head(iris) en la línea de
| comandos para ver las primeras seis líneas de contenido de iris.

> head(iris)
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa

| Excellent job!

  |===========================================                   |  69%
| Sepal.Length y Sepal.Width representan la longitud y ancho del sépalo
| respectivamente. Petal.Length y Petal.Width representan la longitud y
| ancho del pétalo. Species representa a la especie (setosa, versicolor
| y virginica).

...

  |===========================================                   |  70%
| Como ya sabes, plot() es una función genérica, por lo que también
| puedes pedirle que te grafique un data frame completo. Por ejemplo,
| iris; ingresa plot(iris) en la línea de comandos.

> plot(iris)
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| All that practice is paying off!

  |============================================                  |  72%
| O bien, puedes tomar columnas y graficarla. Ingresa
| plot(iris$Petal.Length, iris$Petal.Width) en la línea de comandos.

> plot(iris$Petal.Length, iris$Petal.Width)
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| That's the answer I was looking for.

  |=============================================                 |  73%
| Pero no es necesario graficar pares de puntos.

...

  |==============================================                |  75%
| Un histograma es una representación visual de la distribución de un
| conjunto de datos.

...

  |===============================================               |  76%
| Ahora usa la función hist() para graficar un histograma de las
| longitudes de los pétalos. Ingresa hist(iris$Petal.Length, col="red")
| en la línea de comandos.

> hist(iris$Petal.Length, col="red")
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| You are quite good my friend!

  |================================================              |  78%
| La función hist() es una función de alto nivel y recibe un vector de
| valores numéricos y grafica un histograma. Un histograma consiste de
| un eje X y un eje Y, y varias barras de diferentes tamaños. La altura
| del eje Y te muestra la frecuencia con la que aparecen los valores
| del eje X en el conjunto de datos.

...

  |=================================================             |  79%
| La forma de un histograma es una de sus características más
| importantes, pues te permite ver relativamente donde se encuentra
| sitiada la mayor y menor cantidad de información. Esto te permite
| encontrar valores atípicos.

...

  |==================================================            |  81%
| En caso de que no quieras que te grafique frecuencias puedes usar el
| parámetro freq = FALSE para que grafique probabilidades. Ingresa
| hist(iris$Petal.Length, col="red", freq=FALSE) en la línea de
| comandos.

> hist(iris$Petal.Length, col="red", freq=FALSE)
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| All that practice is paying off!

  |===================================================           |  82%
| También es posible cambiar el número de celdas del histograma. Para
| eso usa el argumento breaks. Dependiendo del número de celdas
| especificadas el gráfico puede ser de una forma u otra. Ingresa
| hist(iris$Petal.Length, col="red", breaks=5) en la línea de comandos.

> hist(iris$Petal.Length, col="red", breaks=5)
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| That's the answer I was looking for.

  |====================================================          |  84%
| Además de histogramas existen las gráficas de caja.

...

  |=====================================================         |  85%
| La función boxplots(), también de alto nivel, genera gráficas de
| caja. Una gráfica de caja es una forma compacta para mostrar la
| distribución de una variable. La caja muestra el rango intercuartil.

...

  |======================================================        |  87%
| Ahora ingresa ?boxplot en la línea de comandos para conocer el uso de
| la función boxplot().

> ?boxplot

| You got it right!

  |=======================================================       |  88%
| Como ya habrás notado, boxplot() además recibe un argumento
| 'formula', el cual generalmente es una expresión con una tilde (~),
| la cual indica la relación entre las variables de entrada. Eso te
| permite dar como fórmula algo como Sepal.Width ~ Species para
| graficar la relación entre el ancho del sépalo y la especie.

...

  |========================================================      |  90%
| Ingresa boxplot(Sepal.Width ~ Species, data=iris, col=2:4) en la
| línea de comandos.

> boxplot(Sepal.Width ~ Species, data=iris, col=2:4)
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| You are amazing!

  |========================================================      |  91%
| boxplot() te generó por cada especie (setosa, versicolor y virginica)
| los valores de dispersión de los anchos del sépalo. La gráfica te
| muestra que el ancho del sépalo de la especie setosa es mucho mayor
| que el de las demás especies.

...

  |=========================================================     |  93%
| boxplot() puede ser usado para crear gráficas de caja para variables
| individuales o para variables por grupo.

...

  |==========================================================    |  94%
| Al igual que con hist() puedes usar los mismos argumentos que usaste
| en plot() para añadir títulos (título, subtítulo, eje x, eje y).

...

  |===========================================================   |  96%
| Además, existen las gráficas de pastel.

...

  |============================================================  |  97%
| Las graficas de pastel no son recomendadas ya que sus características
| son algo limitadas. Los autores recomiendan usar gráficas de barras o
| de puntos en vez de gráficas de pastel, debido a que las personas son
| capaces de juzgar longitudes con mayor precisión que volúmenes.

...

  |============================================================= |  99%
| Las gráficas de pastel son creadas con la función pie(x, labels=),
| donde x es un vector numérico positivo indicando el área de las
| rebanadas y labels es un vector que indica el nombre de cada
| rebanada. Ingresa pie(c(50, 50, 50), labels=levels(iris$Species)) en
| la línea de comandos.

> pie(c(50, 50, 50), labels=levels(iris$Species))
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| Excellent job!

  |==============================================================| 100%
| Has concluido la lección. ¿Te gustaría que se le notificará a
| Coursera que has completado esta lección?

1: Si
2: No

Selection: 1
Â¿CÃºal es tu nombre de usuario registrado en Coursera (email)? maldo.jota@gmail.com
Â¿CÃºal es tu token de la tarea? iVF4ZFPsHEsDK835
Â¡El envÃ­o de la calificaciÃ³n fue satisfactorio!


////////////////////////////////////////////////////////////////////////////////

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Obtener Ayuda
 2: Objetos Tipos de Datos y Operaciones Basicas
 3: Subconjuntos de Datos
 4: Leer y escribir Datos
 5: Funciones
 6: Funciones apply
 7: Graficacion
 8: Parametros en el Sistema de Graficos
 9: Colores en el Sistema de Graficos
10: Graficacion con texto y notacion matematica
11: Creacion de Graficas en 3D
12: Expresiones regulares
13: Graficacion con ggplot2
14: Simulacion

Selection: 8
  |                                                              |   0%

| En esta lección verás los parámetros del sistema de gráficos a más
| detalle.

...

  |==                                                            |   3%
| Cuando creas gráficas, las opciones por defecto de R no siempre
| producirán exactamente lo que deseas. Sin embargo, puedes modificar
| casi cualquier aspecto de la gráfica usando los parámetros del
| sistema de gráficos.

...

  |====                                                          |   6%
| Los parámetros del sistema de gráficos pueden establecerse de dos
| maneras: de forma permanente (que afecta a todas las funciones de
| gráficos) o temporal (que afecta sólo a la función llamada como lo
| viste en la lección Graficación).

...

  |======                                                        |   9%
| La función par() es usada para acceder y modificar la lista de
| parámetros de forma permanente.

...

  |========                                                      |  12%
| Para ver más detalles introduce ?par en la línea de comandos.

> ?par

| Great job!

  |==========                                                    |  16%
| Las nuevas configuraciones establecidas en la función par() serán los
| valores por defecto para cualquier gráfica nueva hasta que la sesión
| sea finalizada.

...

  |============                                                  |  19%
| La función par() puede ser muy útil si deseas establecer los
| parámetros una vez y luego graficar múltiples veces con ellos.

...

  |==============                                                |  22%
| Puedes checar o establecer los valores de los parámetros de sistema
| de gráficos con la función par().

...

  |================                                              |  25%
| Para obtener una lista mostrando todos los parámetros del sistema de
| gráficos, simplemente llama a la función par() sin argumentos.
| ¡Inténtalo!

> par()
$xlog
[1] FALSE

$ylog
[1] FALSE

$adj
[1] 0.5

$ann
[1] TRUE

$ask
[1] TRUE

$bg
[1] "cornsilk"

$bty
[1] "o"

$cex
[1] 1

$cex.axis
[1] 1

$cex.lab
[1] 1

$cex.main
[1] 1.2

$cex.sub
[1] 1

$cin
[1] 0.15 0.20

$col
[1] "black"

$col.axis
[1] "black"

$col.lab
[1] "black"

$col.main
[1] "black"

$col.sub
[1] "black"

$cra
[1] 14.4 19.2

$crt
[1] 0

$csi
[1] 0.2

$cxy
[1] 0.2349955 0.3133273

$din
[1] 5.333333 3.218750

$err
[1] 0

$family
[1] ""

$fg
[1] "black"

$fig
[1] 0 1 0 1

$fin
[1] 5.333333 3.218750

$font
[1] 1

$font.axis
[1] 1

$font.lab
[1] 1

$font.main
[1] 2

$font.sub
[1] 1

$lab
[1] 5 5 7

$las
[1] 0

$lend
[1] "round"

$lheight
[1] 1

$ljoin
[1] "round"

$lmitre
[1] 10

$lty
[1] "solid"

$lwd
[1] 1

$mai
[1] 1.02 0.82 0.82 0.42

$mar
[1] 5.1 4.1 4.1 2.1

$mex
[1] 1

$mfcol
[1] 1 1

$mfg
[1] 1 1 1 1

$mfrow
[1] 1 1

$mgp
[1] 3 1 0

$mkh
[1] 0.001

$new
[1] FALSE

$oma
[1] 0 0 0 0

$omd
[1] 0 1 0 1

$omi
[1] 0 0 0 0

$page
[1] TRUE

$pch
[1] 1

$pin
[1] 4.093333 1.378750

$plt
[1] 0.1537500 0.9212500 0.3168932 0.7452427

$ps
[1] 12

$pty
[1] "m"

$smo
[1] 1

$srt
[1] 0

$tck
[1] NA

$tcl
[1] -0.5

$usr
[1] -3.206383  3.206383 -1.080000  1.080000

$xaxp
[1] -3  3  6

$xaxs
[1] "r"

$xaxt
[1] "s"

$xpd
[1] FALSE

$yaxp
[1] -1  1  4

$yaxs
[1] "r"

$yaxt
[1] "s"

$ylbias
[1] 0.2


| You are quite good my friend!

  |=================                                             |  28%
| Puedes guardar todos los valores de par() en un objeto. Ingresa
| par_orig <- par() en la línea de comandos para guardar los valores en
| la variable par_orig.

> par_orig <- par()

| Keep up the great work!

  |===================                                           |  31%
| Esto puede ser útil, ya que puedes volver a utilizar estos valores
| después de haberlos modificado.

...

  |=====================                                         |  34%
| Si deseas checar el valor de un parámetro con la función par(), usa
| el nombre del parámetro como argumento (en cadena). Por ejemplo,
| ingresa par("col") en la línea de comandos para conocer el valor por
| defecto del parámetro col (color).

> par("col")
[1] "black"

| You got it!

  |=======================                                       |  38%
| Para establecer el valor de un parámetro, basta con usar el nombre
| del parámetro como argumento de la función par(). Por ejemplo, puedes
| usar la función par() para cambiar el valor del parámetro col.
| Ingresa par(col="blue") en la línea de comandos.

> par(col = "blue")

| Your dedication is inspiring!

  |=========================                                     |  41%
| Para probar que los cambios se han efectuado, en esta lección
| volverás a trabajar con el conjunto de datos iris. Carga el conjunto
| de datos iris.

> iris
    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species
1            5.1         3.5          1.4         0.2     setosa
2            4.9         3.0          1.4         0.2     setosa
3            4.7         3.2          1.3         0.2     setosa
4            4.6         3.1          1.5         0.2     setosa
5            5.0         3.6          1.4         0.2     setosa
6            5.4         3.9          1.7         0.4     setosa
7            4.6         3.4          1.4         0.3     setosa
8            5.0         3.4          1.5         0.2     setosa
9            4.4         2.9          1.4         0.2     setosa
10           4.9         3.1          1.5         0.1     setosa
11           5.4         3.7          1.5         0.2     setosa
12           4.8         3.4          1.6         0.2     setosa
13           4.8         3.0          1.4         0.1     setosa
14           4.3         3.0          1.1         0.1     setosa
15           5.8         4.0          1.2         0.2     setosa
16           5.7         4.4          1.5         0.4     setosa
17           5.4         3.9          1.3         0.4     setosa
18           5.1         3.5          1.4         0.3     setosa
19           5.7         3.8          1.7         0.3     setosa
20           5.1         3.8          1.5         0.3     setosa
21           5.4         3.4          1.7         0.2     setosa
22           5.1         3.7          1.5         0.4     setosa
23           4.6         3.6          1.0         0.2     setosa
24           5.1         3.3          1.7         0.5     setosa
25           4.8         3.4          1.9         0.2     setosa
26           5.0         3.0          1.6         0.2     setosa
27           5.0         3.4          1.6         0.4     setosa
28           5.2         3.5          1.5         0.2     setosa
29           5.2         3.4          1.4         0.2     setosa
30           4.7         3.2          1.6         0.2     setosa
31           4.8         3.1          1.6         0.2     setosa
32           5.4         3.4          1.5         0.4     setosa
33           5.2         4.1          1.5         0.1     setosa
34           5.5         4.2          1.4         0.2     setosa
35           4.9         3.1          1.5         0.2     setosa
36           5.0         3.2          1.2         0.2     setosa
37           5.5         3.5          1.3         0.2     setosa
38           4.9         3.6          1.4         0.1     setosa
39           4.4         3.0          1.3         0.2     setosa
40           5.1         3.4          1.5         0.2     setosa
41           5.0         3.5          1.3         0.3     setosa
42           4.5         2.3          1.3         0.3     setosa
43           4.4         3.2          1.3         0.2     setosa
44           5.0         3.5          1.6         0.6     setosa
45           5.1         3.8          1.9         0.4     setosa
46           4.8         3.0          1.4         0.3     setosa
47           5.1         3.8          1.6         0.2     setosa
48           4.6         3.2          1.4         0.2     setosa
49           5.3         3.7          1.5         0.2     setosa
50           5.0         3.3          1.4         0.2     setosa
51           7.0         3.2          4.7         1.4 versicolor
52           6.4         3.2          4.5         1.5 versicolor
53           6.9         3.1          4.9         1.5 versicolor
54           5.5         2.3          4.0         1.3 versicolor
55           6.5         2.8          4.6         1.5 versicolor
56           5.7         2.8          4.5         1.3 versicolor
57           6.3         3.3          4.7         1.6 versicolor
58           4.9         2.4          3.3         1.0 versicolor
59           6.6         2.9          4.6         1.3 versicolor
60           5.2         2.7          3.9         1.4 versicolor
61           5.0         2.0          3.5         1.0 versicolor
62           5.9         3.0          4.2         1.5 versicolor
63           6.0         2.2          4.0         1.0 versicolor
64           6.1         2.9          4.7         1.4 versicolor
65           5.6         2.9          3.6         1.3 versicolor
66           6.7         3.1          4.4         1.4 versicolor
67           5.6         3.0          4.5         1.5 versicolor
68           5.8         2.7          4.1         1.0 versicolor
69           6.2         2.2          4.5         1.5 versicolor
70           5.6         2.5          3.9         1.1 versicolor
71           5.9         3.2          4.8         1.8 versicolor
72           6.1         2.8          4.0         1.3 versicolor
73           6.3         2.5          4.9         1.5 versicolor
74           6.1         2.8          4.7         1.2 versicolor
75           6.4         2.9          4.3         1.3 versicolor
76           6.6         3.0          4.4         1.4 versicolor
77           6.8         2.8          4.8         1.4 versicolor
78           6.7         3.0          5.0         1.7 versicolor
79           6.0         2.9          4.5         1.5 versicolor
80           5.7         2.6          3.5         1.0 versicolor
81           5.5         2.4          3.8         1.1 versicolor
82           5.5         2.4          3.7         1.0 versicolor
83           5.8         2.7          3.9         1.2 versicolor
84           6.0         2.7          5.1         1.6 versicolor
85           5.4         3.0          4.5         1.5 versicolor
86           6.0         3.4          4.5         1.6 versicolor
87           6.7         3.1          4.7         1.5 versicolor
88           6.3         2.3          4.4         1.3 versicolor
89           5.6         3.0          4.1         1.3 versicolor
90           5.5         2.5          4.0         1.3 versicolor
91           5.5         2.6          4.4         1.2 versicolor
92           6.1         3.0          4.6         1.4 versicolor
93           5.8         2.6          4.0         1.2 versicolor
94           5.0         2.3          3.3         1.0 versicolor
95           5.6         2.7          4.2         1.3 versicolor
96           5.7         3.0          4.2         1.2 versicolor
97           5.7         2.9          4.2         1.3 versicolor
98           6.2         2.9          4.3         1.3 versicolor
99           5.1         2.5          3.0         1.1 versicolor
100          5.7         2.8          4.1         1.3 versicolor
101          6.3         3.3          6.0         2.5  virginica
102          5.8         2.7          5.1         1.9  virginica
103          7.1         3.0          5.9         2.1  virginica
104          6.3         2.9          5.6         1.8  virginica
105          6.5         3.0          5.8         2.2  virginica
106          7.6         3.0          6.6         2.1  virginica
107          4.9         2.5          4.5         1.7  virginica
108          7.3         2.9          6.3         1.8  virginica
109          6.7         2.5          5.8         1.8  virginica
110          7.2         3.6          6.1         2.5  virginica
111          6.5         3.2          5.1         2.0  virginica
112          6.4         2.7          5.3         1.9  virginica
113          6.8         3.0          5.5         2.1  virginica
114          5.7         2.5          5.0         2.0  virginica
115          5.8         2.8          5.1         2.4  virginica
116          6.4         3.2          5.3         2.3  virginica
117          6.5         3.0          5.5         1.8  virginica
118          7.7         3.8          6.7         2.2  virginica
119          7.7         2.6          6.9         2.3  virginica
120          6.0         2.2          5.0         1.5  virginica
121          6.9         3.2          5.7         2.3  virginica
122          5.6         2.8          4.9         2.0  virginica
123          7.7         2.8          6.7         2.0  virginica
124          6.3         2.7          4.9         1.8  virginica
125          6.7         3.3          5.7         2.1  virginica
126          7.2         3.2          6.0         1.8  virginica
127          6.2         2.8          4.8         1.8  virginica
128          6.1         3.0          4.9         1.8  virginica
129          6.4         2.8          5.6         2.1  virginica
130          7.2         3.0          5.8         1.6  virginica
131          7.4         2.8          6.1         1.9  virginica
132          7.9         3.8          6.4         2.0  virginica
133          6.4         2.8          5.6         2.2  virginica
134          6.3         2.8          5.1         1.5  virginica
135          6.1         2.6          5.6         1.4  virginica
136          7.7         3.0          6.1         2.3  virginica
137          6.3         3.4          5.6         2.4  virginica
138          6.4         3.1          5.5         1.8  virginica
139          6.0         3.0          4.8         1.8  virginica
140          6.9         3.1          5.4         2.1  virginica
141          6.7         3.1          5.6         2.4  virginica
142          6.9         3.1          5.1         2.3  virginica
143          5.8         2.7          5.1         1.9  virginica
144          6.8         3.2          5.9         2.3  virginica
145          6.7         3.3          5.7         2.5  virginica
146          6.7         3.0          5.2         2.3  virginica
147          6.3         2.5          5.0         1.9  virginica
148          6.5         3.0          5.2         2.0  virginica
149          6.2         3.4          5.4         2.3  virginica
150          5.9         3.0          5.1         1.8  virginica

| Nice try, but that's not exactly what I was hoping for. Try again.
| Or, type info() for more options.

| Ingresa data("iris") en la línea de comandos para cargar el conjunto
| de datos iris.

> data("iris")

| Nice work!

  |===========================                                   |  44%
| Ahora prueba que el color por defecto ha sido cambiado a azul.
| Ingresa plot(iris) en la línea de comandos para verificar esto.

> plot(iris)
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| You got it right!

  |=============================                                 |  47%
| Y si revisas nuevamente el valor de col usando par() encontrarás que
| ha sido establecido a azul ("blue"). Revisa el valor de col.

> par()
$xlog
[1] FALSE

$ylog
[1] FALSE

$adj
[1] 0.5

$ann
[1] TRUE

$ask
[1] TRUE

$bg
[1] "cornsilk"

$bty
[1] "o"

$cex
[1] 1

$cex.axis
[1] 1

$cex.lab
[1] 1

$cex.main
[1] 1.2

$cex.sub
[1] 1

$cin
[1] 0.15 0.20

$col
[1] "blue"

$col.axis
[1] "black"

$col.lab
[1] "black"

$col.main
[1] "black"

$col.sub
[1] "black"

$cra
[1] 14.4 19.2

$crt
[1] 0

$csi
[1] 0.2

$cxy
[1] 0.03664495 0.14505893

$din
[1] 5.333333 3.218750

$err
[1] 0

$family
[1] ""

$fg
[1] "black"

$fig
[1] 0 1 0 1

$fin
[1] 5.333333 3.218750

$font
[1] 1

$font.axis
[1] 1

$font.lab
[1] 1

$font.main
[1] 2

$font.sub
[1] 1

$lab
[1] 5 5 7

$las
[1] 0

$lend
[1] "round"

$lheight
[1] 1

$ljoin
[1] "round"

$lmitre
[1] 10

$lty
[1] "solid"

$lwd
[1] 1

$mai
[1] 1.02 0.82 0.82 0.42

$mar
[1] 5.1 4.1 4.1 2.1

$mex
[1] 1

$mfcol
[1] 1 1

$mfg
[1] 1 1 1 1

$mfrow
[1] 1 1

$mgp
[1] 3 1 0

$mkh
[1] 0.001

$new
[1] FALSE

$oma
[1] 0 0 0 0

$omd
[1] 0 1 0 1

$omi
[1] 0 0 0 0

$page
[1] TRUE

$pch
[1] 1

$pin
[1] 4.093333 1.378750

$plt
[1] 0.1537500 0.9212500 0.3168932 0.7452427

$ps
[1] 12

$pty
[1] "m"

$smo
[1] 1

$srt
[1] 0

$tck
[1] NA

$tcl
[1] -0.5

$usr
[1] 0 1 0 1

$xaxp
[1] 0 1 5

$xaxs
[1] "r"

$xaxt
[1] "s"

$xpd
[1] FALSE

$yaxp
[1] 0 1 5

$yaxs
[1] "r"

$yaxt
[1] "s"

$ylbias
[1] 0.2


| One more time. You can do it! Or, type info() for more options.

| Ingresa par("col") en la línea de comandos.

> par("col")
[1] "blue"

| All that practice is paying off!

  |===============================                               |  50%
| Cuando graficas el data frame iris usando plot(iris), los colores
| mostrados no dicen mucho acerca de las diferentes especies. Así que
| le puedes decir a R que grafique usando un color diferente por cada
| una de la especies usando col=iris$Species. Ingresa plot(iris,
| col=iris$Species) en la línea de comandos.

> plot(iris,col=iris$Species)
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| That's correct!

  |=================================                             |  53%
| Para continuar es importante recordar los nombres de las columnas de
| iris. ¡Inténtalo!

> head(iris)
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa

| Almost! Try again. Or, type info() for more options.

> colnames(iris)
[1] "Sepal.Length" "Sepal.Width"  "Petal.Length" "Petal.Width"
[5] "Species"

| That's not exactly what I'm looking for. Try again. Or, type info()
| for more options.

> names(iris)
[1] "Sepal.Length" "Sepal.Width"  "Petal.Length" "Petal.Width"
[5] "Species"

| You are amazing!

  |===================================                           |  56%
| Comienza viendo las columnas Sepal.Length y Petal.Length. Otra vez
| especifica un color por especie. Ingresa plot(iris$Sepal.Length,
| iris$Petal.Length, col = iris$Species) en la línea de comandos.

> plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| Excellent work!

  |=====================================                         |  59%
| Los puntos usados para graficar son difíciles de ver. Escoge otros
| diferentes.

...

  |=======================================                       |  62%
| Un parámetro importante es el símbolo que se usa para graficar
| puntos; éstos se cambian usando el parámetro pch. Este parámetro
| puede recibir valores de dos maneras.

...

  |=========================================                     |  66%
| Una manera es usando un código numérico, donde cada código numérico
| corresponde a un símbolo. Pruébalo usando pch=15. Ingresa par(pch=15)
| en la línea de comandos.

> par(pch=15)

| You got it!

  |===========================================                   |  69%
| El código numérico 15 representa cuadrados. Verifica el nuevo valor
| que estableciste. Ingresa plot(iris$Sepal.Length, iris$Petal.Length,
| col = iris$Species) en la línea de comandos.

> plot(iris$Sepal.Length, iris$Petal.Length,col = iris$Species)
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| That's the answer I was looking for.

  |=============================================                 |  72%
| La otra manera es utilizando una cadena. Ingresa
| plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species,
| pch="A") en la línea de comandos.

> plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species,pch="A")
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| You got it right!

  |==============================================                |  75%
| Como te podrás imaginar, cambiaste el valor del parámetro pch
| temporalmente, al haberlo modificado en la función de plot() y no por
| medio de la función par(). Si nuevamente graficas sin especificar
| pch, verás que el símbolo graficado nuevamente es un cuadrado.
| ¡Verifica esto! Ingresa plot(iris$Sepal.Length, iris$Petal.Length,
| col = iris$Species) en la línea de comandos.

> plot(iris$Sepal.Length, iris$Petal.Length,col = iris$Species)
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| All that practice is paying off!

  |================================================              |  78%
| Los códigos numéricos que puedes usar son los números del 0 al 25.
| Para conocer los símbolos disponibles ingresa plot(1:26, pch=0:25) en
| la línea de comandos.

> plot(1:26, pch=0:25)
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| Excellent job!

  |==================================================            |  81%
| En particular a los símbolos del 21 al 25 les puedes cambiar el color
| de la orilla y el de relleno. Esto se hace usando los parámetros col
| y bg. Ingresa plot(iris$Sepal.Length, iris$Petal.Length, col =
| iris$Species, pch = 21, bg = "blue") en la línea de comandos.

> plot(iris$Sepal.Length, iris$Petal.Length, col =ris$Species, pch = 21, bg = "blue")
Hit <Return> to see next plot:
Error in plot.xy(xy, type, ...) : object 'ris' not found
> plot(iris$Sepal.Length, iris$Petal.Length, col =iris$Species, pch = 21, bg = "blue")
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| You are doing so well!

  |====================================================          |  84%
| También puedes cambiar el tamaño de los símbolos usando el argumento
| cex. Ingresa plot(iris$Sepal.Length, iris$Petal.Length, col =
| iris$Species, cex = 2) en la línea de comandos.

> plot(iris$Sepal.Length, iris$Petal.Length, col =iris$Species, cex = 2)
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| All that practice is paying off!

  |======================================================        |  88%
| Es difícil distinguir qué color pertenece a qué especie. Lo mejor
| sería hacer una leyenda. La función legend() puede ser usada para
| añadir leyendas a las gráficas. Ingresa legend(x = 4.5, y = 7, legend
| = levels(iris$Species), col = c(1:3), pch = 16) para añadir una
| leyenda.

> legend(x = 4.5, y = 7, legend = levels(iris$Species), col = c(1:3), pch = 16)

| You are doing so well!

  |========================================================      |  91%
| Los parámetros ‘x’ y ‘y’ representan las coordenadas que serán usadas
| para la leyenda; legend representa a las cadenas que aparecerán en la
| leyenda; col indica el color de las líneas o símbolos que aparecerán
| en la leyenda; y pch indica los caracteres o símbolos que aparecerán
| en la leyenda.

...

  |==========================================================    |  94%
| Recuerda que todos los parámetros a los que modificaste su valor
| también los puedes cambiar directamente desde las funciones para
| graficar de alto nivel.

...

  |============================================================  |  97%
| Por último, si deseas regresar a los valores de los parámetros por
| omisión que tenías en el sistema base, basta con llamar a la función
| par() pasándole como argumento el objeto donde guardaste los valores
| originales. Regresa a los valores originales usando la función par().

>
> par(par_orig)
Warning messages:
1: In par(par_orig) :
  el parámetro del gráfico "cin" no puede ser especificado
2: In par(par_orig) :
  el parámetro del gráfico "cra" no puede ser especificado
3: In par(par_orig) :
  el parámetro del gráfico "csi" no puede ser especificado
4: In par(par_orig) :
  el parámetro del gráfico "cxy" no puede ser especificado
5: In par(par_orig) :
  el parámetro del gráfico "din" no puede ser especificado
6: In par(par_orig) :
  el parámetro del gráfico "page" no puede ser especificado

| Excellent job!

  |==============================================================| 100%
| Has concluido la lección. ¿Te gustaría que se le notificará a
| Coursera que has completado esta lección?

1: No
2: Si

Selection: 2
Â¿CÃºal es tu nombre de usuario registrado en Coursera (email)? maldo.jota@gmail.com
Â¿CÃºal es tu token de la tarea? maldo.jota@gmail.com.
El envÃ­o de la calificaciÃ³n fallÃ³.
Presiona ESC si deseas salir de la lecciÃ³n
y subir tu calificaciÃ³n mÃ¡s tarde.

| That's not exactly what I'm looking for. Try again.

|

1: Si
2: No

Selection: 1
Â¿CÃºal es tu nombre de usuario registrado en Coursera (email)? maldo.jota@gmail.com.
Â¿CÃºal es tu token de la tarea? WYN4xy4sU1SpPwva
El envÃ­o de la calificaciÃ³n fallÃ³.
Presiona ESC si deseas salir de la lecciÃ³n
y subir tu calificaciÃ³n mÃ¡s tarde.

| Nice try, but that's not exactly what I was hoping for. Try again.

|

1: No
2: Si

Selection: 2
Â¿CÃºal es tu nombre de usuario registrado en Coursera (email)? maldo.jota@gmail.com
Â¿CÃºal es tu token de la tarea? WYN4xy4sU1SpPwva
Â¡El envÃ­o de la calificaciÃ³n fue satisfactorio!

| Nice work!


////////////////////////////////////////////////////////////////////////////////


Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Obtener Ayuda
 2: Objetos Tipos de Datos y Operaciones Basicas
 3: Subconjuntos de Datos
 4: Leer y escribir Datos
 5: Funciones
 6: Funciones apply
 7: Graficacion
 8: Parametros en el Sistema de Graficos
 9: Colores en el Sistema de Graficos
10: Graficacion con texto y notacion matematica
11: Creacion de Graficas en 3D
12: Expresiones regulares
13: Graficacion con ggplot2
14: Simulacion

Selection: 9
  |                                                              |   0%

| En esta lección verás cómo se manejan los colores en el sistema de
| gráficos de R.

...

  |==                                                            |   3%
| Anteriormente viste que puedes usar el parámetro col para especificar
| colores.

...

  |===                                                           |   5%
| Hasta ahora, la mayoría de las veces has usado cadenas refiriéndose a
| un simple conjunto de colores.

...

  |=====                                                         |   8%
| En R puedes especificar colores de tres maneras: como una cadena,
| usando los componentes RGB (rojo, verde, azul) o haciendo referencia
| a un índice de la paleta de colores mediante un entero.

...

  |=======                                                       |  11%
| Para obtener la lista de los nombres de colores válidos, usa la
| función colors(). Ingresa colors() en la línea de comandos.

> colors()
  [1] "white"                "aliceblue"
  [3] "antiquewhite"         "antiquewhite1"
  [5] "antiquewhite2"        "antiquewhite3"
  [7] "antiquewhite4"        "aquamarine"
  [9] "aquamarine1"          "aquamarine2"
 [11] "aquamarine3"          "aquamarine4"
 [13] "azure"                "azure1"
 [15] "azure2"               "azure3"
 [17] "azure4"               "beige"
 [19] "bisque"               "bisque1"
 [21] "bisque2"              "bisque3"
 [23] "bisque4"              "black"
 [25] "blanchedalmond"       "blue"
 [27] "blue1"                "blue2"
 [29] "blue3"                "blue4"
 [31] "blueviolet"           "brown"
 [33] "brown1"               "brown2"
 [35] "brown3"               "brown4"
 [37] "burlywood"            "burlywood1"
 [39] "burlywood2"           "burlywood3"
 [41] "burlywood4"           "cadetblue"
 [43] "cadetblue1"           "cadetblue2"
 [45] "cadetblue3"           "cadetblue4"
 [47] "chartreuse"           "chartreuse1"
 [49] "chartreuse2"          "chartreuse3"
 [51] "chartreuse4"          "chocolate"
 [53] "chocolate1"           "chocolate2"
 [55] "chocolate3"           "chocolate4"
 [57] "coral"                "coral1"
 [59] "coral2"               "coral3"
 [61] "coral4"               "cornflowerblue"
 [63] "cornsilk"             "cornsilk1"
 [65] "cornsilk2"            "cornsilk3"
 [67] "cornsilk4"            "cyan"
 [69] "cyan1"                "cyan2"
 [71] "cyan3"                "cyan4"
 [73] "darkblue"             "darkcyan"
 [75] "darkgoldenrod"        "darkgoldenrod1"
 [77] "darkgoldenrod2"       "darkgoldenrod3"
 [79] "darkgoldenrod4"       "darkgray"
 [81] "darkgreen"            "darkgrey"
 [83] "darkkhaki"            "darkmagenta"
 [85] "darkolivegreen"       "darkolivegreen1"
 [87] "darkolivegreen2"      "darkolivegreen3"
 [89] "darkolivegreen4"      "darkorange"
 [91] "darkorange1"          "darkorange2"
 [93] "darkorange3"          "darkorange4"
 [95] "darkorchid"           "darkorchid1"
 [97] "darkorchid2"          "darkorchid3"
 [99] "darkorchid4"          "darkred"
[101] "darksalmon"           "darkseagreen"
[103] "darkseagreen1"        "darkseagreen2"
[105] "darkseagreen3"        "darkseagreen4"
[107] "darkslateblue"        "darkslategray"
[109] "darkslategray1"       "darkslategray2"
[111] "darkslategray3"       "darkslategray4"
[113] "darkslategrey"        "darkturquoise"
[115] "darkviolet"           "deeppink"
[117] "deeppink1"            "deeppink2"
[119] "deeppink3"            "deeppink4"
[121] "deepskyblue"          "deepskyblue1"
[123] "deepskyblue2"         "deepskyblue3"
[125] "deepskyblue4"         "dimgray"
[127] "dimgrey"              "dodgerblue"
[129] "dodgerblue1"          "dodgerblue2"
[131] "dodgerblue3"          "dodgerblue4"
[133] "firebrick"            "firebrick1"
[135] "firebrick2"           "firebrick3"
[137] "firebrick4"           "floralwhite"
[139] "forestgreen"          "gainsboro"
[141] "ghostwhite"           "gold"
[143] "gold1"                "gold2"
[145] "gold3"                "gold4"
[147] "goldenrod"            "goldenrod1"
[149] "goldenrod2"           "goldenrod3"
[151] "goldenrod4"           "gray"
[153] "gray0"                "gray1"
[155] "gray2"                "gray3"
[157] "gray4"                "gray5"
[159] "gray6"                "gray7"
[161] "gray8"                "gray9"
[163] "gray10"               "gray11"
[165] "gray12"               "gray13"
[167] "gray14"               "gray15"
[169] "gray16"               "gray17"
[171] "gray18"               "gray19"
[173] "gray20"               "gray21"
[175] "gray22"               "gray23"
[177] "gray24"               "gray25"
[179] "gray26"               "gray27"
[181] "gray28"               "gray29"
[183] "gray30"               "gray31"
[185] "gray32"               "gray33"
[187] "gray34"               "gray35"
[189] "gray36"               "gray37"
[191] "gray38"               "gray39"
[193] "gray40"               "gray41"
[195] "gray42"               "gray43"
[197] "gray44"               "gray45"
[199] "gray46"               "gray47"
[201] "gray48"               "gray49"
[203] "gray50"               "gray51"
[205] "gray52"               "gray53"
[207] "gray54"               "gray55"
[209] "gray56"               "gray57"
[211] "gray58"               "gray59"
[213] "gray60"               "gray61"
[215] "gray62"               "gray63"
[217] "gray64"               "gray65"
[219] "gray66"               "gray67"
[221] "gray68"               "gray69"
[223] "gray70"               "gray71"
[225] "gray72"               "gray73"
[227] "gray74"               "gray75"
[229] "gray76"               "gray77"
[231] "gray78"               "gray79"
[233] "gray80"               "gray81"
[235] "gray82"               "gray83"
[237] "gray84"               "gray85"
[239] "gray86"               "gray87"
[241] "gray88"               "gray89"
[243] "gray90"               "gray91"
[245] "gray92"               "gray93"
[247] "gray94"               "gray95"
[249] "gray96"               "gray97"
[251] "gray98"               "gray99"
[253] "gray100"              "green"
[255] "green1"               "green2"
[257] "green3"               "green4"
[259] "greenyellow"          "grey"
[261] "grey0"                "grey1"
[263] "grey2"                "grey3"
[265] "grey4"                "grey5"
[267] "grey6"                "grey7"
[269] "grey8"                "grey9"
[271] "grey10"               "grey11"
[273] "grey12"               "grey13"
[275] "grey14"               "grey15"
[277] "grey16"               "grey17"
[279] "grey18"               "grey19"
[281] "grey20"               "grey21"
[283] "grey22"               "grey23"
[285] "grey24"               "grey25"
[287] "grey26"               "grey27"
[289] "grey28"               "grey29"
[291] "grey30"               "grey31"
[293] "grey32"               "grey33"
[295] "grey34"               "grey35"
[297] "grey36"               "grey37"
[299] "grey38"               "grey39"
[301] "grey40"               "grey41"
[303] "grey42"               "grey43"
[305] "grey44"               "grey45"
[307] "grey46"               "grey47"
[309] "grey48"               "grey49"
[311] "grey50"               "grey51"
[313] "grey52"               "grey53"
[315] "grey54"               "grey55"
[317] "grey56"               "grey57"
[319] "grey58"               "grey59"
[321] "grey60"               "grey61"
[323] "grey62"               "grey63"
[325] "grey64"               "grey65"
[327] "grey66"               "grey67"
[329] "grey68"               "grey69"
[331] "grey70"               "grey71"
[333] "grey72"               "grey73"
[335] "grey74"               "grey75"
[337] "grey76"               "grey77"
[339] "grey78"               "grey79"
[341] "grey80"               "grey81"
[343] "grey82"               "grey83"
[345] "grey84"               "grey85"
[347] "grey86"               "grey87"
[349] "grey88"               "grey89"
[351] "grey90"               "grey91"
[353] "grey92"               "grey93"
[355] "grey94"               "grey95"
[357] "grey96"               "grey97"
[359] "grey98"               "grey99"
[361] "grey100"              "honeydew"
[363] "honeydew1"            "honeydew2"
[365] "honeydew3"            "honeydew4"
[367] "hotpink"              "hotpink1"
[369] "hotpink2"             "hotpink3"
[371] "hotpink4"             "indianred"
[373] "indianred1"           "indianred2"
[375] "indianred3"           "indianred4"
[377] "ivory"                "ivory1"
[379] "ivory2"               "ivory3"
[381] "ivory4"               "khaki"
[383] "khaki1"               "khaki2"
[385] "khaki3"               "khaki4"
[387] "lavender"             "lavenderblush"
[389] "lavenderblush1"       "lavenderblush2"
[391] "lavenderblush3"       "lavenderblush4"
[393] "lawngreen"            "lemonchiffon"
[395] "lemonchiffon1"        "lemonchiffon2"
[397] "lemonchiffon3"        "lemonchiffon4"
[399] "lightblue"            "lightblue1"
[401] "lightblue2"           "lightblue3"
[403] "lightblue4"           "lightcoral"
[405] "lightcyan"            "lightcyan1"
[407] "lightcyan2"           "lightcyan3"
[409] "lightcyan4"           "lightgoldenrod"
[411] "lightgoldenrod1"      "lightgoldenrod2"
[413] "lightgoldenrod3"      "lightgoldenrod4"
[415] "lightgoldenrodyellow" "lightgray"
[417] "lightgreen"           "lightgrey"
[419] "lightpink"            "lightpink1"
[421] "lightpink2"           "lightpink3"
[423] "lightpink4"           "lightsalmon"
[425] "lightsalmon1"         "lightsalmon2"
[427] "lightsalmon3"         "lightsalmon4"
[429] "lightseagreen"        "lightskyblue"
[431] "lightskyblue1"        "lightskyblue2"
[433] "lightskyblue3"        "lightskyblue4"
[435] "lightslateblue"       "lightslategray"
[437] "lightslategrey"       "lightsteelblue"
[439] "lightsteelblue1"      "lightsteelblue2"
[441] "lightsteelblue3"      "lightsteelblue4"
[443] "lightyellow"          "lightyellow1"
[445] "lightyellow2"         "lightyellow3"
[447] "lightyellow4"         "limegreen"
[449] "linen"                "magenta"
[451] "magenta1"             "magenta2"
[453] "magenta3"             "magenta4"
[455] "maroon"               "maroon1"
[457] "maroon2"              "maroon3"
[459] "maroon4"              "mediumaquamarine"
[461] "mediumblue"           "mediumorchid"
[463] "mediumorchid1"        "mediumorchid2"
[465] "mediumorchid3"        "mediumorchid4"
[467] "mediumpurple"         "mediumpurple1"
[469] "mediumpurple2"        "mediumpurple3"
[471] "mediumpurple4"        "mediumseagreen"
[473] "mediumslateblue"      "mediumspringgreen"
[475] "mediumturquoise"      "mediumvioletred"
[477] "midnightblue"         "mintcream"
[479] "mistyrose"            "mistyrose1"
[481] "mistyrose2"           "mistyrose3"
[483] "mistyrose4"           "moccasin"
[485] "navajowhite"          "navajowhite1"
[487] "navajowhite2"         "navajowhite3"
[489] "navajowhite4"         "navy"
[491] "navyblue"             "oldlace"
[493] "olivedrab"            "olivedrab1"
[495] "olivedrab2"           "olivedrab3"
[497] "olivedrab4"           "orange"
[499] "orange1"              "orange2"
[501] "orange3"              "orange4"
[503] "orangered"            "orangered1"
[505] "orangered2"           "orangered3"
[507] "orangered4"           "orchid"
[509] "orchid1"              "orchid2"
[511] "orchid3"              "orchid4"
[513] "palegoldenrod"        "palegreen"
[515] "palegreen1"           "palegreen2"
[517] "palegreen3"           "palegreen4"
[519] "paleturquoise"        "paleturquoise1"
[521] "paleturquoise2"       "paleturquoise3"
[523] "paleturquoise4"       "palevioletred"
[525] "palevioletred1"       "palevioletred2"
[527] "palevioletred3"       "palevioletred4"
[529] "papayawhip"           "peachpuff"
[531] "peachpuff1"           "peachpuff2"
[533] "peachpuff3"           "peachpuff4"
[535] "peru"                 "pink"
[537] "pink1"                "pink2"
[539] "pink3"                "pink4"
[541] "plum"                 "plum1"
[543] "plum2"                "plum3"
[545] "plum4"                "powderblue"
[547] "purple"               "purple1"
[549] "purple2"              "purple3"
[551] "purple4"              "red"
[553] "red1"                 "red2"
[555] "red3"                 "red4"
[557] "rosybrown"            "rosybrown1"
[559] "rosybrown2"           "rosybrown3"
[561] "rosybrown4"           "royalblue"
[563] "royalblue1"           "royalblue2"
[565] "royalblue3"           "royalblue4"
[567] "saddlebrown"          "salmon"
[569] "salmon1"              "salmon2"
[571] "salmon3"              "salmon4"
[573] "sandybrown"           "seagreen"
[575] "seagreen1"            "seagreen2"
[577] "seagreen3"            "seagreen4"
[579] "seashell"             "seashell1"
[581] "seashell2"            "seashell3"
[583] "seashell4"            "sienna"
[585] "sienna1"              "sienna2"
[587] "sienna3"              "sienna4"
[589] "skyblue"              "skyblue1"
[591] "skyblue2"             "skyblue3"
[593] "skyblue4"             "slateblue"
[595] "slateblue1"           "slateblue2"
[597] "slateblue3"           "slateblue4"
[599] "slategray"            "slategray1"
[601] "slategray2"           "slategray3"
[603] "slategray4"           "slategrey"
[605] "snow"                 "snow1"
[607] "snow2"                "snow3"
[609] "snow4"                "springgreen"
[611] "springgreen1"         "springgreen2"
[613] "springgreen3"         "springgreen4"
[615] "steelblue"            "steelblue1"
[617] "steelblue2"           "steelblue3"
[619] "steelblue4"           "tan"
[621] "tan1"                 "tan2"
[623] "tan3"                 "tan4"
[625] "thistle"              "thistle1"
[627] "thistle2"             "thistle3"
[629] "thistle4"             "tomato"
[631] "tomato1"              "tomato2"
[633] "tomato3"              "tomato4"
[635] "turquoise"            "turquoise1"
[637] "turquoise2"           "turquoise3"
[639] "turquoise4"           "violet"
[641] "violetred"            "violetred1"
[643] "violetred2"           "violetred3"
[645] "violetred4"           "wheat"
[647] "wheat1"               "wheat2"
[649] "wheat3"               "wheat4"
[651] "whitesmoke"           "yellow"
[653] "yellow1"              "yellow2"
[655] "yellow3"              "yellow4"
[657] "yellowgreen"

| Excellent job!

  |========                                                      |  14%
| Notarás que al final de la lista varios colores contienen la
| subcadena "yellow". Una manera de buscar todos los colores que
| contengan la subcadena "yellow", es usando la función grep().

...

  |==========                                                    |  16%
| Ve el uso de grep() usando la función help().

> help(greep)
No documentation for ‘greep’ in specified packages and libraries:
you could try ‘??greep’

| Not quite right, but keep trying. Or, type info() for more options.

> help(greep)
No documentation for ‘greep’ in specified packages and libraries:
you could try ‘??greep’

| Try again. Getting it right on the first try is boring anyway! Or,
| type info() for more options.

> help(grep)

| Excellent work!

  |============                                                  |  19%
| La función grep() toma al argumento pattern (una expresión regular),
| lee el argumento x (un vector de caracteres, o un objeto que puede
| ser convertido por la función as.character() a un vector de
| caracteres), y regresa las coincidencias de pattern dentro de x.

...

  |=============                                                 |  22%
| Para buscar todos los colores que contengan la subcadena "yellow"
| ingresa grep("yellow", colors(), value=TRUE) en la línea de comandos.

> grep("yellow", colors(), value=TRUE)
 [1] "greenyellow"          "lightgoldenrodyellow"
 [3] "lightyellow"          "lightyellow1"
 [5] "lightyellow2"         "lightyellow3"
 [7] "lightyellow4"         "yellow"
 [9] "yellow1"              "yellow2"
[11] "yellow3"              "yellow4"
[13] "yellowgreen"

| You're the best!

  |===============                                               |  24%
| Ahora sabes que R contiene 13 tipos de amarillos (yellow). Notarás
| que usaste el argumento value de la función grep(); esto se debe a
| que de no haberlo usado, grep() te hubiera regresado las posiciones
| en donde se encontraron coincidencias, en vez de las cadenas en donde
| las encontró.

...

  |=================                                             |  27%
| La lista de colores válidos es muy extensa. Obten su longitud.

> length(grep("yellow", colors(), value=TRUE))
[1] 13

| Not quite right, but keep trying. Or, type info() for more options.

| Ingresa length(colors()) en la línea de comandos para obtener el
| tamaño de la lista de colores válidos.

> length(colors())
[1] 657

| Excellent work!

  |==================                                            |  30%
| Entonces ahora ya sabes que R tiene una gran lista de más de 650
| colores que puedes usar por nombre.

...

  |====================                                          |  32%
| Para especificar un color usando componentes RGB, usa una cadena de
| la forma "#RRGGBB", donde RR, GG y BB son valores hexadecimales que
| especifican la cantidad de rojo, verde y azul, respectivamente.

...

  |======================                                        |  35%
| Si deseas hacer referencia a un índice de la paleta de colores
| mediante un entero, debes saber que existen ocho colores en la paleta
| por defecto.

...

  |=======================                                       |  38%
| La función palette() es usada para ver o manipular la paleta de
| colores. La paleta de colores es usada cuando el parámetro col es
| usado con un valor numérico.

...

  |=========================                                     |  41%
| Ingresa palette() para conocer la paleta por defecto.

> pallete()
Error in pallete() : could not find function "pallete"
> palette()
[1] "black"   "red"     "green3"  "blue"    "cyan"    "magenta"
[7] "yellow"  "gray"

| That's correct!

  |===========================                                   |  43%
| Cada color es representado por un número entero; es decir, el número
| 1 representa al color negro, el 2 al rojo… y el 8 al gris. Ingresa
| plot(1:8, col=1:8, main="Colores por índice", pch=17, cex=3) en la
| línea de comandos.

> plot(1:8, col=1:8, main="Colores por índice", pch=17, cex=3)
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| You got it!

  |============================                                  |  46%
| Como recordarás, el argumento main es usado para establecer el título
| de la gráfica, el argumento pch para establecer el símbolo con el que
| se graficará y el argumento cex para indicar el tamaño del símbolo
| usado para graficar.

...

  |==============================                                |  49%
| Si usas un número más grande que ocho para graficar, los colores
| serán reciclados. Compruébalo: ingresa plot(1:12, col=1:12,
| main="Colores reciclados", pch=18, cex=3) en la línea de comandos.

> plot(1:12, col=1:12, main="Colores reciclados", pch=18, cex=3)
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| You're the best!

  |================================                              |  51%
| Si requieres un número más grande de colores para graficar,
| necesitarás acceder a una paleta más grande.

...

  |==================================                            |  54%
| Existen varias funciones incluidas en R que te regresan colores
| continuos (paletas de tamaño variable), que le pueden dar aspectos
| diferentes a tus gráficas.

...

  |===================================                           |  57%
| Algunos ejemplos de estas funciones son rainbow(), heat.colors(),
| topo.colors(), y terrain.colors().

...

  |=====================================                         |  59%
| Para cambiar la paleta de colores por defecto por cualquiera de estas
| paletas, lo primero que debes hacer es crear una paleta. Para crear
| una nueva paleta basta con llamar a cualquiera de las funciones
| anteriormente mencionadas, mandando como argumento el número de
| colores que deseas que contenga la paleta. Por ejemplo, ingresa
| paleta_arcoiris <- rainbow(10) en la línea de comandos para crear una
| paleta con 10 colores.

> paleta_arcoiris <- rainbow(10)

| That's a job well done!

  |=======================================                       |  62%
| Ahora ve el contenido de la paleta que acabas de crear.

> paleta_arcoiris
 [1] "#FF0000FF" "#FF9900FF" "#CCFF00FF" "#33FF00FF" "#00FF66FF"
 [6] "#00FFFFFF" "#0066FFFF" "#3300FFFF" "#CC00FFFF" "#FF0099FF"

| You got it right!

  |========================================                      |  65%
| Como verás, la nueva paleta que creaste usando rainbow(10) contiene
| colores que usan componentes RGB.

...

  |==========================================                    |  68%
| Para cambiar la paleta de colores por la que creaste, ingresa
| palette(paleta_arcoiris) en la línea de comandos.

> palette(paleta_arcoiris)

| That's a job well done!

  |============================================                  |  70%
| Verifica que los cambios se efectuaron en la paleta de colores.

> palette()
 [1] "red"     "#FF9900" "#CCFF00" "#33FF00" "#00FF66" "cyan"
 [7] "#0066FF" "#3300FF" "#CC00FF" "#FF0099"

| Nice work!

  |=============================================                 |  73%
| Ahora grafica usando la nueva paleta; ingresa plot(1:10, col=1:10,
| main="Paleta Arcoiris",pch=17, cex=3) en la línea de comandos.

> plot(1:10, col=1:10,main="Paleta Arcoiris",pch=17, cex=3)
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| Keep up the great work!

  |===============================================               |  76%
| Prueba con otra paleta; ingresa paleta_calida <- heat.colors(10) para
| crear una paleta con 10 colores cálidos.

> paleta_calida <- heat.colors(10)

| That's a job well done!

  |=================================================             |  78%
| Ahora cambia la paleta actual por la nueva paleta creada.

> palette(paleta_calida)

| That's the answer I was looking for.

  |==================================================            |  81%
| Y ahora grafica plot(1:10, col=1:10, main="Paleta Cálida",pch=17,
| cex=3) para ver los cambios.

> plot(1:10, col=1:10, main="Paleta Cálida",pch=17, cex=3)
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| You are really on a roll!

  |====================================================          |  84%
| Todas las diferentes paletas son muy bonitas y útiles de diferentes
| maneras, pero tal vez no es exactamente lo que estás buscando, o tal
| vez tú quieres tener más control sobre los colores. Para especificar
| los colores que quieras puedes crear un vector que contenga dichos
| colores. Por ejemplo, crea el vector ‘mi_paleta’ que contenga los
| colores "red", "green" y "#0019FFFF".

> mi_paleta<-c("red", "green" , "#0019FFFF")

| You are really on a roll!

  |======================================================        |  86%
| Y ahora puedes usar el vector directamente para graficar. Por
| ejemplo, ingresa plot(1:10, col=mi_paleta, main="Mi Paleta",pch=17,
| cex=3) en la línea de comandos.

> plot(1:10, col=mi_paleta, main="Mi Paleta",pch=17, cex=3)
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| Nice work!

  |=======================================================       |  89%
| O establecerlo como tu nueva paleta. Ingresa palette(mi_paleta) en la
| línea de comandos.

> palette(mi_paleta)

| Great job!

  |=========================================================     |  92%
| Y graficar haciendo referencia por índice. Ingresa plot(1:10,
| col=1:10, main="Mi Paleta",pch=17, cex=3) en la línea de comandos.

> plot(1:10, col=1:10, main="Mi Paleta",pch=17, cex=3)
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| Keep up the great work!

  |===========================================================   |  95%
| Si deseas regresar a la paleta de colores por defecto, debes de
| ingresar palette("default") en la línea de comandos. ¡Ahora hazlo!

> palette("default")

| Perseverance, that's the answer.

  |============================================================  |  97%
| Otras funciones que están disponibles para especificar colores son
| rgb(), hsv(), hcl() y gray(), pero su uso es diferente a las que
| usaste anteriormente. Si deseas usarlas consulta su página de ayuda.

...

  |==============================================================| 100%
| Has concluido la lección. ¿Te gustaría que se le notificará a
| Coursera que has completado esta lección?

1: Si
2: No

Selection: 1
Â¿CÃºal es tu nombre de usuario registrado en Coursera (email)? maldo.jota@○gmail.com
Â¿CÃºal es tu token de la tarea? 47ZktqupiyYoDJGE
El envÃ­o de la calificaciÃ³n fallÃ³.
Presiona ESC si deseas salir de la lecciÃ³n
y subir tu calificaciÃ³n mÃ¡s tarde.

| Not quite, but you're learning! Try again.

|

1: Si
2: No

Selection: 1
Â¿CÃºal es tu nombre de usuario registrado en Coursera (email)? maldo.jota@gmail.com
Â¿CÃºal es tu token de la tarea? maldo.jota@○gmail.commaldo.jota@○gmail.com
El envÃ­o de la calificaciÃ³n fallÃ³.
Presiona ESC si deseas salir de la lecciÃ³n
y subir tu calificaciÃ³n mÃ¡s tarde.

| Not exactly. Give it another go.

|

1: No
2: Si

Selection: 2
Â¿CÃºal es tu nombre de usuario registrado en Coursera (email)? maldo.jota@gmail.com
Â¿CÃºal es tu token de la tarea? 47ZktqupiyYoDJGE
Â¡El envÃ­o de la calificaciÃ³n fue satisfactorio!

| Your dedication is inspiring!

/////////////////////////////////////////////////////////////////////////////////

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Obtener Ayuda
 2: Objetos Tipos de Datos y Operaciones Basicas
 3: Subconjuntos de Datos
 4: Leer y escribir Datos
 5: Funciones
 6: Funciones apply
 7: Graficacion
 8: Parametros en el Sistema de Graficos
 9: Colores en el Sistema de Graficos
10: Graficacion con texto y notacion matematica
11: Creacion de Graficas en 3D
12: Expresiones regulares
13: Graficacion con ggplot2
14: Simulacion

Selection: 10
  |                                                              |   0%

| En esta lección conocerás cómo utilizar notación matemática en R.

...

  |==                                                            |   4%
| Antes de comenzar con notación matemática es importante que sepas que
| existe la función text().

...

  |====                                                          |   7%
| La función text() dibuja cadenas sobre gráficas. Para probar la
| función text(), crea una gráfica vacía de tamaño 20x20. Ingresa
| plot(1:20, type="n") en la línea de comandos.

> plot(1:20, type="n")
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| You got it right!

  |=======                                                       |  11%
| Ahora ingresa text(5, 5, "¡Hola Mundo!") en la línea de comandos para
| probar la función text().

> text(5, 5, "¡Hola Mundo!")

| You are quite good my friend!

  |=========                                                     |  14%
| Con esto graficaste la cadena "¡Hola Mundo!" en las coordenadas (5,
| 5). Para conocer más acerca de text() ve su página de ayuda.

> ?text

| You're the best!

  |===========                                                   |  18%
| La función text() dibuja las cadenas dadas por el argumento labels en
| las coordenadas x y y.

...

  |=============                                                 |  21%
| Muchos parámetros controlan el aspecto en que los textos son
| mostrados en la gráfica.

...

  |================                                              |  25%
| Si deseas cambiar el tamaño de los textos producidos por la función
| text(), puedes usar el argumento cex de la función text(), el cual
| especifica un factor de escala por defecto para el texto. Pruébalo.
| Ingresa text(11, 11, "¡Hola Mundo! x2", cex=2) en la línea de
| comandos.

> text(11, 11, "¡Hola Mundo! x2", cex=2)

| All that hard work is paying off!

  |==================                                            |  29%
| Otro aspecto importante son los tipos de fuentes que puedes usar. Una
| manera simple para cambiar los tipos de fuentes es usando el
| parámetro family. Ingresa text(7, 7, "¡Hola Mundo con Serif!",
| family="serif") en la línea de comandos.

> text(7, 7, "¡Hola Mundo con Serif!",family="serif")

| Great job!

  |====================                                          |  32%
| Los valores comunes usados para el argumento family son "serif",
| "sans", "mono" y "symbol". Ahora prueba la fuente "mono". Ingresa
| text(9, 9, "¡Hola Mundo con Mono!", family="mono") en la línea de
| comandos.

> text(9, 9, "¡Hola Mundo con Mono!", family="mono")

| All that hard work is paying off!

  |======================                                        |  36%
| Ahora ingresa text(13, 13, "¡Hola Mundo con Sans!", family="sans") en
| la línea de comandos.

> text(13, 13, "¡Hola Mundo con Sans!", family="sans")

| Excellent job!

  |========================                                      |  39%
| Notarás que la fuente por defecto es "sans".

...

  |===========================                                   |  43%
| Volviendo a la notación matemática...

...

  |=============================                                 |  46%
| Muchas veces necesitarás etiquetas o títulos donde tengas que
| utilizar notación matemática; es decir, que tengas que hacer uso de
| símbolos y/o expresiones matemáticas.

...

  |===============================                               |  50%
| Ingresa demo(plotmath) para ver un ejemplo de expresiones matemáticas
| que puedes usar en R.

> demo(plotmath)


	demo(plotmath)
	---- ~~~~~~~~

Type  <Return>	 to start :

> #  Copyright (C) 2002-2016 The R Core Team
>
> require(datasets)

> require(grDevices); require(graphics)

> ## --- "math annotation" in plots :
>
> ######
> # create tables of mathematical annotation functionality
> ######
> make.table <- function(nr, nc) {
+     savepar <- par(mar=rep(0, 4), pty="s")
+     plot(c(0, nc*2 + 1), c(0, -(nr + 1)),
+          type="n", xlab="", ylab="", axes=FALSE)
+     savepar
+ }

> get.r <- function(i, nr) {
+     i %% nr + 1
+ }

> get.c <- function(i, nr) {
+     i %/% nr + 1
+ }

> draw.title.cell <- function(title, i, nr) {
+     r <- get.r(i, nr)
+     c <- get.c(i, nr)
+     text(2*c - .5, -r, title)
+     rect((2*(c - 1) + .5), -(r - .5), (2*c + .5), -(r + .5))
+ }

> draw.plotmath.cell <- function(expr, i, nr, string = NULL) {
+     r <- get.r(i, nr)
+     c <- get.c(i, nr)
+     if (is.null(string)) {
+         string <- deparse(expr)
+         string <- substr(string, 12, nchar(string) - 1)
+     }
+     text((2*(c - 1) + 1), -r, string, col="grey50")
+     text((2*c), -r, expr, adj=c(.5,.5))
+     rect((2*(c - 1) + .5), -(r - .5), (2*c + .5), -(r + .5), border="grey")
+ }

> nr <- 20

> nc <- 2

> oldpar <- make.table(nr, nc)
Hit <Return> to see next plot:

> i <- 0

> draw.title.cell("Arithmetic Operators", i, nr); i <- i + 1

> draw.plotmath.cell(expression(x + y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x - y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x * y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x / y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %+-% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %/% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %*% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %.% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(-x), i, nr); i <- i + 1

> draw.plotmath.cell(expression(+x), i, nr); i <- i + 1

> draw.title.cell("Sub/Superscripts", i, nr); i <- i + 1

> draw.plotmath.cell(expression(x[i]), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x^2), i, nr); i <- i + 1

> draw.title.cell("Juxtaposition", i, nr); i <- i + 1

> draw.plotmath.cell(expression(x * y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(paste(x, y, z)), i, nr); i <- i + 1

> draw.title.cell("Radicals", i, nr); i <- i + 1

> draw.plotmath.cell(expression(sqrt(x)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(sqrt(x, y)), i, nr); i <- i + 1

> draw.title.cell("Lists", i, nr); i <- i + 1

> draw.plotmath.cell(expression(list(x, y, z)), i, nr); i <- i + 1

> draw.title.cell("Relations", i, nr); i <- i + 1

> draw.plotmath.cell(expression(x == y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x != y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x < y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x <= y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x > y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x >= y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %~~% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %=~% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %==% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %prop% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %~% y), i, nr); i <- i + 1

> draw.title.cell("Typeface", i, nr); i <- i + 1

> draw.plotmath.cell(expression(plain(x)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(italic(x)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(bold(x)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(bolditalic(x)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(underline(x)), i, nr); i <- i + 1

> # Need fewer, wider columns for ellipsis ...
> nr <- 20

> nc <- 2

> make.table(nr, nc)
Hit <Return> to see next plot:
$mar
[1] 0 0 0 0

$pty
[1] "s"


> i <- 0

> draw.title.cell("Ellipsis", i, nr); i <- i + 1

> draw.plotmath.cell(expression(list(x[1], ..., x[n])), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x[1] + ... + x[n]), i, nr); i <- i + 1

> draw.plotmath.cell(expression(list(x[1], cdots, x[n])), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x[1] + ldots + x[n]), i, nr); i <- i + 1

> draw.title.cell("Set Relations", i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %subset% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %subseteq% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %supset% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %supseteq% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %notsubset% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %in% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %notin% y), i, nr); i <- i + 1

> draw.title.cell("Accents", i, nr); i <- i + 1

> draw.plotmath.cell(expression(hat(x)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(tilde(x)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(ring(x)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(bar(xy)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(widehat(xy)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(widetilde(xy)), i, nr); i <- i + 1

> draw.title.cell("Arrows", i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %<->% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %->% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %<-% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %up% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %down% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %<=>% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %=>% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %<=% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %dblup% y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x %dbldown% y), i, nr); i <- i + 1

> draw.title.cell("Symbolic Names", i, nr); i <- i + 1

> draw.plotmath.cell(expression(Alpha - Omega), i, nr); i <- i + 1

> draw.plotmath.cell(expression(alpha - omega), i, nr); i <- i + 1

> draw.plotmath.cell(expression(phi1 + sigma1), i, nr); i <- i + 1

> draw.plotmath.cell(expression(Upsilon1), i, nr); i <- i + 1

> draw.plotmath.cell(expression(infinity), i, nr); i <- i + 1

> draw.plotmath.cell(expression(32 * degree), i, nr); i <- i + 1

> draw.plotmath.cell(expression(60 * minute), i, nr); i <- i + 1

> draw.plotmath.cell(expression(30 * second), i, nr); i <- i + 1

> # Need even fewer, wider columns for typeface and style ...
> nr <- 20

> nc <- 1

> make.table(nr, nc)
Hit <Return> to see next plot:
$mar
[1] 0 0 0 0

$pty
[1] "s"


> i <- 0

> draw.title.cell("Style", i, nr); i <- i + 1

> draw.plotmath.cell(expression(displaystyle(x)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(textstyle(x)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(scriptstyle(x)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(scriptscriptstyle(x)), i, nr); i <- i + 1

> draw.title.cell("Spacing", i, nr); i <- i + 1

> draw.plotmath.cell(expression(x ~~ y), i, nr); i <- i + 1

> # Need fewer, taller rows for fractions ...
> # cheat a bit to save pages
> par(new = TRUE)

> nr <- 10

> nc <- 1

> make.table(nr, nc)
$mar
[1] 0 0 0 0

$pty
[1] "s"


> i <- 4

> draw.plotmath.cell(expression(x + phantom(0) + y), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x + over(1, phantom(0))), i, nr); i <- i + 1

> draw.title.cell("Fractions", i, nr); i <- i + 1

> draw.plotmath.cell(expression(frac(x, y)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(over(x, y)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(atop(x, y)), i, nr); i <- i + 1

> # Need fewer, taller rows and fewer, wider columns for big operators ...
> nr <- 10

> nc <- 1

> make.table(nr, nc)
Hit <Return> to see next plot:
$mar
[1] 0 0 0 0

$pty
[1] "s"


> i <- 0

> draw.title.cell("Big Operators", i, nr); i <- i + 1

> draw.plotmath.cell(expression(sum(x[i], i=1, n)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(prod(plain(P)(X == x), x)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(integral(f(x) * dx, a, b)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(union(A[i], i==1, n)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(intersect(A[i], i==1, n)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(lim(f(x), x %->% 0)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(min(g(x), x >= 0)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(inf(S)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(sup(S)), i, nr); i <- i + 1

> nr <- 11

> make.table(nr, nc)
Hit <Return> to see next plot:
$mar
[1] 0 0 0 0

$pty
[1] "s"


> i <- 0

> draw.title.cell("Grouping", i, nr); i <- i + 1

> # Those involving '{ . }' have to be done "by hand"
> draw.plotmath.cell(expression({}(x , y)), i, nr, string="{}(x, y)"); i <- i + 1

> draw.plotmath.cell(expression((x + y)*z), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x^y + z),   i, nr); i <- i + 1

> draw.plotmath.cell(expression(x^(y + z)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(x^{y + z}), i, nr, string="x^{y + z}"); i <- i + 1

> draw.plotmath.cell(expression(group("(", list(a, b), "]")), i, nr); i <- i + 1

> draw.plotmath.cell(expression(bgroup("(", atop(x, y), ")")), i, nr); i <- i + 1

> draw.plotmath.cell(expression(group(lceil, x, rceil)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(group(lfloor, x, rfloor)), i, nr); i <- i + 1

> draw.plotmath.cell(expression(group("|", x, "|")), i, nr); i <- i + 1

> par(oldpar)

Type  <Return>	 to start :
Hit <Return> to see next plot:
Hit <Return> to see next plot:
Hit <Return> to see next plot:
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| That's correct!

  |=================================                             |  54%
| Las columnas de texto gris muestran las expresiones en R, y la
| columna de texto negra muestra cómo se verán.

...

  |===================================                           |  57%
| Para generar estos símbolos matemáticos, en R puedes utilizar la
| función expression(). La función expression() recibe como argumento
| una expresión como las que viste en color gris. Pruébalo. Ingresa
| plot(1:10, type="n", main=expression(alpha + beta)) en la línea de
| comandos.

> plot(1:10, type="n", main=expression(alpha + beta))
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| You got it right!

  |======================================                        |  61%
| Además, puedes combinar expression() con la función paste() para
| poder tener texto y símbolos en una misma sentencia. Ingresa
| plot(1:10, type="n", xlab = expression(paste("Valores de ", x^phi1)))
| en la línea de comandos.

> plot(1:10, type="n", xlab = expression(paste("Valores de ", x^phi1)))
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| Keep up the great work!

  |========================================                      |  64%
| Si deseas revisar la lista de expresiones disponibles, ingresa
| ?plotmath en la línea de comandos.

> ?plotmath

| You got it!

  |==========================================                    |  68%
| Además, puedes utilizar la función substitute() que te permitirá
| obtener el valor de una variable u objeto en R; esto lo podrás usar
| dentro de una función paste() para generar una expresión.

...

  |============================================                  |  71%
| Para mostrar su uso, ingresa t <- 10 en la línea de comandos.

> t <- 10

| Keep working like that and you'll get there!

  |==============================================                |  75%
| Y ahora ingresa plot(1:t, main=substitute(paste("La gráfica del
| vector 1:", x), list(x=t))) en la línea de comandos.

> plot(1:t, main=substitute(paste("La gráfica del vector 1:", x), list(x=t)))
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| Excellent work!

  |=================================================             |  79%
| Observa el título de la gráfica: "La gráfica del vector 1:10".

...

  |===================================================           |  82%
| Si ahora cambias el valor de t, ingresa t <- 20 en la línea de
| comandos.

> t<-20

| Keep up the great work!

  |=====================================================         |  86%
| Y nuevamente grafica plot(1:t, main=substitute(paste("La gráfica del
| vector 1:", x), list(x=t))); cambiará el título de la gráfica.
| ¡Pruébalo!

> plot(1:t, main=substitute(paste("La gráfica del vector 1:", x), list(x=t)))
Hit <Return> to see next plot:
Hit <Return> to see next plot:

| Nice work!

  |=======================================================       |  89%
| Notaras que el título cambio.

...

  |==========================================================    |  93%
| Esto es muy útil si quieres obtener gráficas donde alguno de los
| parámetros es diferente; así puedes generar múltiples gráficas con
| distintos parámetros y las etiquetas de éstos pueden ir cambiando de
| acuerdo a los parámetros.

...

  |============================================================  |  96%
| Para conocer más acerca de la función substitute() ingresa
| ?substitute en la línea de comandos.

> ?substitute

| All that practice is paying off!

  |==============================================================| 100%
| Has concluido la lección. ¿Te gustaría que se le notificará a
| Coursera que has completado esta lección?

1: Si
2: No

Selection: 1
Â¿CÃºal es tu nombre de usuario registrado en Coursera (email)? maldo.jota@gmail.com
Â¿CÃºal es tu token de la tarea? dUgmUFZzeNkAlN4r
Â¡El envÃ­o de la calificaciÃ³n fue satisfactorio!

| That's correct!

///////////////////////////////////////////////////////////////////////////////

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Obtener Ayuda
 2: Objetos Tipos de Datos y Operaciones Basicas
 3: Subconjuntos de Datos
 4: Leer y escribir Datos
 5: Funciones
 6: Funciones apply
 7: Graficacion
 8: Parametros en el Sistema de Graficos
 9: Colores en el Sistema de Graficos
10: Graficacion con texto y notacion matematica
11: Creacion de Graficas en 3D
12: Expresiones regulares
13: Graficacion con ggplot2
14: Simulacion

Selection: 11

| Attempting to load lesson dependencies...

| This lesson requires the ‘rgl’ package. Would you like me to install
| it for you now?

1: Yes
2: No

Selection: 1

| Trying to install package ‘rgl’ now...
also installing the dependencies ‘colorspace’, ‘RColorBrewer’, ‘dichromat’, ‘munsell’, ‘labeling’, ‘viridisLite’, ‘gtable’, ‘plyr’, ‘reshape2’, ‘scales’, ‘processx’, ‘xtable’, ‘sourcetools’, ‘ggplot2’, ‘miniUI’, ‘webshot’, ‘htmlwidgets’, ‘shiny’, ‘crosstalk’, ‘manipulateWidget’

package ‘colorspace’ successfully unpacked and MD5 sums checked
package ‘RColorBrewer’ successfully unpacked and MD5 sums checked
package ‘dichromat’ successfully unpacked and MD5 sums checked
package ‘munsell’ successfully unpacked and MD5 sums checked
package ‘labeling’ successfully unpacked and MD5 sums checked
package ‘viridisLite’ successfully unpacked and MD5 sums checked
package ‘gtable’ successfully unpacked and MD5 sums checked
package ‘plyr’ successfully unpacked and MD5 sums checked
package ‘reshape2’ successfully unpacked and MD5 sums checked
package ‘scales’ successfully unpacked and MD5 sums checked
package ‘processx’ successfully unpacked and MD5 sums checked
package ‘xtable’ successfully unpacked and MD5 sums checked
package ‘sourcetools’ successfully unpacked and MD5 sums checked
package ‘ggplot2’ successfully unpacked and MD5 sums checked
package ‘miniUI’ successfully unpacked and MD5 sums checked
package ‘webshot’ successfully unpacked and MD5 sums checked
package ‘htmlwidgets’ successfully unpacked and MD5 sums checked
package ‘shiny’ successfully unpacked and MD5 sums checked
package ‘crosstalk’ successfully unpacked and MD5 sums checked
package ‘manipulateWidget’ successfully unpacked and MD5 sums checked
package ‘rgl’ successfully unpacked and MD5 sums checked

| Package ‘rgl’ loaded correctly!

  |                                                              |   0%

| En esta lección verás cómo crear gráficas en 3D.

...

  |===                                                           |   4%
| Este tipo de gráficas no están implementadas en el sistema de base,
| por lo que usarás rgl.

...

  |=====                                                         |   8%
| Para ejemplificar esta práctica continuarás usando el conjunto de
| datos iris. Carga el conjunto de datos iris.

> data("iris")

| You got it right!

  |========                                                      |  12%
| Usa head(iris) para ver las primeras seis líneas de contenido de
| iris.

>
> head(iris)
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa

| You are amazing!

  |==========                                                    |  17%
| Con esto recordarás que el conjunto de datos de iris contiene las
| medidas de longitud y anchura del sépalo y pétalo, respectivamente,
| por 50 flores de cada una de las tres especies de iris. Las especies
| de iris son: setosa, versicolor y virginica.

...

  |=============                                                 |  21%
| Ingresa x <- iris$Sepal.Length en la línea de comandos para guardar
| la columna que contiene las longitudes de sépalo de las muestras en
| la variable x.

> x <- iris$Sepal.Length

| That's correct!

  |================                                              |  25%
| Repite el proceso anterior, pero guarda en la variable y, la columna
| que contiene las longitudes de pétalo.

> y <- iris$Petal.Length

| You're the best!

  |==================                                            |  29%
| Nuevamente repite el proceso, pero ahora guarda en la variable z la
| columna que contiene las anchuras de sépalo.

> z <- iris$Petal.Width

| Not quite, but you're learning! Try again. Or, type info() for more
| options.

| Ingresa z <- iris$Sepal.Width en la línea de comandos.

> z <- iris$Sepal.Width

| You got it right!

  |=====================                                         |  33%
| Bien; ahora puedes continuar...

...

  |=======================                                       |  38%
| rgl es un paquete de gráficos 3D que produce gráficas interactivas en
| 3D en tiempo real. Permite rotar de forma interactiva, ampliar los
| gráficos, etc. Ingresa ?rgl en la línea de comandos para conocer un
| poco más del paquete rgl.

> ?rgl

| That's the answer I was looking for.

  |==========================                                    |  42%
| rgl incluye una interfaz de nivel superior llamada r3d. Esta interfaz
| está diseñada para actuar como los gráficos clásicos 2D de R.

...

  |============================                                  |  46%
| Para inicializar la interfaz 3D usa la función open3d(). La función
| open3d() intenta abrir una nueva ventana RGL, utilizando los valores
| predeterminados especificados por el usuario. Ingresa open3d() en la
| línea de comandos.

> open3d()
wgl
  1

| All that practice is paying off!

  |===============================                               |  50%
| Ahora puedes utilizar la función plot3d(); ésta funciona de manera
| similar a la función plot() del sistema base de R. En este caso, como
| es en tres dimensiones, recibe una tripleta de valores, 'x', 'y',
| 'z', y una vez recibida esta tripleta dibuja el punto que deseas
| visualizar.

...

  |==================================                            |  54%
| Ingresa plot3d(iris$Sepal.Length, iris$Petal.Length,
| iris$Sepal.Width) en la línea de comandos.

> plot3d(iris$Sepal.Length, iris$Petal.Length,iris$Sepal.Width)

| All that hard work is paying off!

  |====================================                          |  58%
| Al igual que con la función plot(), la gráfica fue construida tomando
| un elemento de cada vector; es decir, para construir cada punto
| plot3d() tomo un elemento del primer vector (posición x), un elemento
| del segundo vector (posición y) y un elemento del tercer vector
| (posición z).

...

  |=======================================                       |  62%
| Notarás que algunos valores por defecto son el tipo de gráfica
| (puntos) y el color negro.

...

  |=========================================                     |  67%
| Al igual que con plot() puedes especificar el tipo de gráfica usando
| el parámetro type. Ingresa plot3d(iris$Sepal.Length,
| iris$Petal.Length, iris$Sepal.Width, type="s") en la línea de
| comandos.

> plot3d(iris$Sepal.Length,iris$Petal.Length, iris$Sepal.Width, type="s")

| You nailed it! Good job!

  |============================================                  |  71%
| Los tipos soportados son 'p' para puntos, 's' para esferas, 'l' para
| líneas, 'h' para segmentos de línea con z = 0, y 'n' para nada.

...

  |==============================================                |  75%
| Asimismo, puedes especificar el color usado para graficar a los
| elementos usando el parámetro col. Ingresa plot3d(iris$Sepal.Length,
| iris$Petal.Length, iris$Sepal.Width, type="s", col=rainbow(150)) en
| la línea de comandos.

> plot3d(iris$Sepal.Length,iris$Petal.Length, iris$Sepal.Width, type="s", col=rainbow(150))

| Great job!

  |=================================================             |  79%
| Algo que debes saber es que si deseas graficar elemento por especie
| no podrás enviarle al parámetro col iris$Species como lo habías
| estado haciendo con la función plot(). Esta vez tendrás que tratar a
| iris$Species como enteros. Para hacer esto ingresa
| plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width,
| type="s", col=as.integer(iris$Species)) en la línea de comandos.

> plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width,type="s", col=as.integer(iris$Species))

| Nice work!

  |====================================================          |  83%
| A diferencia de la función plot() donde si querías cambiar el tamaño
| del elemento graficado usabas el parámetro cex, en plot3d() si deseas
| cambiar el tamaño de las esferas debes usar el parámetro radius.
| Ingresa plot3d(iris$Sepal.Length, iris$Petal.Length,
| iris$Sepal.Width, type="s", col=as.integer(iris$Species), radius=1.5)
| en la linea de comandos.

> plot3d(iris$Sepal.Length, iris$Petal.Length,iris$Sepal.Width, type="s", col=as.integer(iris$Species), radius=1.5)

| That's correct!

  |======================================================        |  88%
| Si graficas líneas o puntos y deseas cambiar su tamaño, el parámetro
| radius no te servirá. Para cambiar el tamaño de las líneas plot3d()
| usa el parámetro lwd y size para cambiar el de los puntos.

...

  |=========================================================     |  92%
| Al igual que con la función plot(), usando plot3d() puedes cambiar el
| título de los ejes usando xlab, ylab y zlab. Ingresa
| plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width,
| type="l", col=as.integer(iris$Species), xlab ="Sepal.Length", ylab =
| "Petal.Length", zlab = "Sepal.Width") en la línea de comandos.

> plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width,type="l", col=as.integer(iris$Species), xlab ="Sepal.Length", ylab ="Petal.Length", zlab = "Sepal.Width")

| Excellent work!

  |===========================================================   |  96%
| Para conocer más opciones de la función plot3d(), ve su página de
| ayuda.

> plot3d()
Error in xyz.coords(x, y, z, xlab = xlabel, ylab = ylabel, zlab = zlabel,  :
  argument "x" is missing, with no default
> ?plot3d()

| Almost! Try again. Or, type info() for more options.

> help(plot3d)

| Nice work!

  |==============================================================| 100%
| Has concluido la lección. ¿Te gustaría que se le notificará a
| Coursera que has completado esta lección?

1: Si
2: No

Selection: 1
Â¿CÃºal es tu nombre de usuario registrado en Coursera (email)? maldo.jota@gmail.com
Â¿CÃºal es tu token de la tarea? rasAvMaxMEFbv8mq
Â¡El envÃ­o de la calificaciÃ³n fue satisfactorio!

| All that hard work is paying off!


///////////////////////////////////////////////////////////////////////////////

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Obtener Ayuda
 2: Objetos Tipos de Datos y Operaciones Basicas
 3: Subconjuntos de Datos
 4: Leer y escribir Datos
 5: Funciones
 6: Funciones apply
 7: Graficacion
 8: Parametros en el Sistema de Graficos
 9: Colores en el Sistema de Graficos
10: Graficacion con texto y notacion matematica
11: Creacion de Graficas en 3D
12: Expresiones regulares
13: Graficacion con ggplot2
14: Simulacion

Selection: 12
  |                                                             |   0%

| R te provee con algunas funciones que te sirven para manipular
| cadenas de caracteres.

...

  |==                                                           |   3%
| Recuerda que una cadena contiene todo texto que se encuentre dentro
| de un par de comillas. Guarda la cadena "¡Hola Mundo!" en la
| variable ‘texto’.

> texto <- "¡Hola Mundo!"

| That's a job well done!

  |===                                                          |   5%
| Observa que una cadena es un vector de caracteres, pero no se puede
| acceder directamente a sus elementos usando la notación de
| indexado([]). Ingresa texto[1] en la línea de comandos para
| comprobar esto.

> texto[1]
[1] "¡Hola Mundo!"

| Keep working like that and you'll get there!

  |=====                                                        |   8%
| Y ahora ingresa texto[2] en la línea de comandos.

> texto[2]
[1] NA

| All that practice is paying off!

  |======                                                       |  11%
| Esto se debe a que el acceso a los elementos de una cadena se
| realiza con la función substring(). Para conocer el uso de
| substring() abre su página de ayuda.

> help("substring")

| Keep working like that and you'll get there!

  |========                                                     |  13%
| Ahora que conoces su uso, usando la función substring obtén la
| subcadena "Mundo" de la variable texto.

> substring(texto,7,11)
[1] "Mundo"

| You are quite good my friend!

  |==========                                                   |  16%
| Pero no sólo eso; esta función puede también utilizarse en
| asignación, lo cual tiene el efecto colateral de cambiar las cadenas
| originales. Para demostrar esto ingresa substring(texto, 7, 11) <-
| "Swirl" en la línea de comandos.

> substring(texto, 7, 11) <- "Swirl"

| Keep working like that and you'll get there!

  |===========                                                  |  18%
| Ahora imprime el contenido de la variable ‘texto’.

> print(texto)
[1] "¡Hola Swirl!"

| That's a job well done!

  |=============                                                |  21%
| Si deseas conocer la longitud de una cadena, no podrás hacer uso de
| la función length(). En cambio deberás usar la función nchar().
| Ingresa nchar(texto) en la línea de comandos para conocer la
| longitud de texto.

> nchar(texto)
[1] 12

| You got it right!

  |==============                                               |  24%
| Anteriormente usaste la función paste(), la cual concatena las
| cadenas que le sean pasadas como argumento. Ingresa paste("¡Adiós",
| "Mundo!") en la línea de comandos.

> Ingresa paste("¡Adiós", "Mundo!")
Error: unexpected symbol in "Ingresa paste"
> paste("¡Adiós", "Mundo!")
[1] "¡Adiós Mundo!"

| Great job!

  |================                                             |  26%
| Debes de saber que por omisión estas cadenas son separadas por un
| espacio, pero puedes cambiar el comportamiento usando el argumento
| sep. Ingresa paste("¡Adiós", "Mundo!", sep="_") en la línea de
| comandos.

> paste("¡Adiós", "Mundo!", sep="_")
[1] "¡Adiós_Mundo!"

| Excellent job!

  |==================                                           |  29%
| Sin embargo, a menudo es más conveniente para crear una cadena
| legible usar la función sprintf(), la cual tiene sintaxis del
| lenguaje C.

...

  |===================                                          |  32%
| Por ejemplo, crea la variable ‘i’ y guarda el número 9 en ella.

>
> i <- 9

| You're the best!

  |=====================                                        |  34%
| Si quisieras conformar una cadena que te diera la información sobre
| ‘i’. Puedes usar la función sprintf() y usar la cadena especial "%d"
| en cada lugar donde quieras hacer uso de un valor numérico; en este
| caso ‘i’. Ingresa sprintf("El cuadrado de %d es %d", i, i^2) en la
| línea de comandos.

> sprintf("El cuadrado de %d es %d", i, i^2)
[1] "El cuadrado de 9 es 81"

| Excellent job!

  |======================                                       |  37%
| La función sprintf() ensambla una cadena formateada con los valores
| que vayas pidiendo. Ingresa ?sprintf en la línea de comandos para
| conocer más acerca de ella.

> ?sprintf

| You are really on a roll!

  |========================                                     |  39%
| Contrario a la función paste() tienes la función strsplit(), la cual
| subdivide una cadena en cadenas más pequeñas, dependiendo de la
| cadena indicada como separación. Ingresa
| strsplit("Me/gusta/programar/en/R", "/") en la línea de comandos.

> strsplit("Me/gusta/programar/en/R", "/")
[[1]]
[1] "Me"        "gusta"     "programar" "en"        "R"


| Great job!

  |==========================                                   |  42%
| Anteriormente usaste la función chartr() para sustituir caracteres
| en cadenas. Ingresa chartr("o", "a", "¡Hola Mundo!") en la línea de
| comandos.

> chartr("o", "a", "¡Hola Mundo!")
[1] "¡Hala Munda!"

| All that practice is paying off!

  |===========================                                  |  45%
| Muchas veces necesitarás reemplazar un texto con otro y chartr()
| funcionará perfectamente.

...

  |=============================                                |  47%
| Pero muchas otras lo que querrás hacer será más complejo, porque
| puede que en vez de ser un simple texto querrás reemplazar todas las
| palabras que terminen con a.

...

  |==============================                               |  50%
| En estos casos puedes utilizar expresiones regulares (que suelen
| llamarse "regex" o "regexp" de forma abreviada).

...

  |================================                             |  53%
| Las expresiones regulares o patrones no son más que una especie de
| comodín o un atajo para referirse a una gran cantidad de cadenas.

...

  |==================================                           |  55%
| A diferencia de otros lenguajes, en los que las expresiones
| regulares se encierran entre algún tipo especial de delimitadores,
| en R una expresión regular se representa como una cadena de texto.

...

  |===================================                          |  58%
| Por ejemplo, el grupo formado por las cadenas "Handel", "Händel" y
| "Haendel" se describe mediante el patrón "H(a|ä|ae)ndel".

...

  |=====================================                        |  61%
| Habitualmente las expresiones regulares se pasan como argumentos de
| una función, que utiliza el patrón representado por ellas para
| realizar alguna tarea como búsqueda o sustitución.

...

  |=======================================                      |  63%
| Para ejemplificar esto guarda la cadena "H(a|ä|ae)ndel" en la
| variable ‘patron’.

> patron <-  "H(a|ä|ae)ndel"

| Nice work!

  |========================================                     |  66%
| Una de las funciones que trabaja con expresiones regulares es
| grep(). Esta función toma como argumentos primero un patrón y como
| segundo argumento un vector de cadenas y grep() te regresa un vector
| numérico, el cual contiene los índices de las cadenas que contienen
| ese patrón.

...

  |==========================================                   |  68%
| Para probar grep() he creado un vector de cadenas y lo guarde en la
| variable ‘musicos’. Revisa el contenido de ‘musicos’.

> musicos
[1] "Handel"    "Mendel"    "Haendel"   "HÃ¤ndel"   "Handemore"
[6] "handel"

| Excellent job!

  |===========================================                  |  71%
| Ahora ingresa grep(patron, musicos) en la línea de comandos.

> grep(patron, musicos)
[1] 1 3

| You nailed it! Good job!

  |=============================================                |  74%
| Efectivamente grep() te regresó las posiciones de las cadenas que
| contienen el patrón "H(a|ä|ae)ndel"; es decir, las posiciones de las
| cadenas "Handel", "Händel" , "Haendel".

...

  |===============================================              |  76%
| Es importante que sepas que el patrón es sensible a mayúsculas; esto
| explica por qué no encontró coincidencia en la cadena "handel".

...

  |================================================             |  79%
| Como ya te habrás imaginado el carácter "|" dentro de una expresión
| regular no representa más que un OR; es decir, el patrón te indica a
| las cadenas: "Handel" o "Händel" o "Haendel".

...

  |==================================================           |  82%
| Si deseas construir un patrón que además incluya las cadenas
| "Mendel" y "handel", puedes hacerlo de la siguiente manera
| ".(a|ä|ae|e)ndel". Ingresa nuevo_patron <- ".(a|ä|ae|e)ndel" en la
| línea de comandos.

> nuevo_patron <- ".(a|ä|ae|e)ndel"

| Great job!

  |===================================================          |  84%
| Donde el "." indica un carácter simple, por lo que cuando lo
| utilizas dentro de la expresión regular estás diciendo que no te
| importa qué carácter está ahí, cualquier carácter cazará con la
| expresión regular. Ingresa grep(nuevo_patron, musicos) para
| comprobar esto.

>
> grep(nuevo_patron, musicos)
[1] 1 2 3 6

| Nice work!

  |=====================================================        |  87%
| Otra función que trabaja con expresiones regulares es regexpr(), que
| al igual que grep() recibe como primer argumento un patrón y como
| segundo un vector de cadenas. A diferencia de grep(), regexpr()
| regresa el índice en donde encuentra la primera aparición del patrón
| que estás buscando. Prueba la función; ingresa regexpr(patron,
| musicos) en la línea de comandos.

> regexpr(patron, musicos)
[1]  1 -1  1 -1 -1 -1
attr(,"match.length")
[1]  6 -1  7 -1 -1 -1

| That's the answer I was looking for.

  |=======================================================      |  89%
| Además de regresar el índice en donde encuentra la primera aparición
| del patrón, también te regresa la longitud del patrón encontrado. Si
| no encuentra el patrón notarás que te regresa como índice y longitud
| un -1.

...

  |========================================================     |  92%
| Si deseas encontrar todas las posiciones donde es encontrado el
| patrón y no sólo la primera, puedes usar gregexpr(), ya que funciona
| de la misma manera que regexpr(), sólo que te regresa todos los
| índices donde encuentra el patrón. Por ejemplo, ingresa
| gregexpr(patron, "Georg Friedrich Händel, en inglés George Frideric
| Handel fue un compositor alemán.") en la línea de comandos.

> gregexpr(patron, "Georg Friedrich Händel, en inglés George Frideric Handel fue un compositor alemán.")
[[1]]
[1] 17 51
attr(,"match.length")
[1] 6 6


| Your dedication is inspiring!

  |==========================================================   |  95%
| Las expresiones regulares pueden ser muy ricas e incluso muy
| complicadas. El objetivo del curso no define que las veas a
| profundidad, pero puedes ver cómo las utiliza R usando ?regexpr.
| Inténtalo.

> ?regexpr

| Keep up the great work!

  |===========================================================  |  97%
| Aquí puedes ver todas las expresiones que te sirven para utilizar
| expresiones regulares dentro del lenguaje con las funciones que
| acabas de ver.

...

  |=============================================================| 100%
| Has concluido la lección. ¿Te gustaría que se le notificará a
| Coursera que has completado esta lección?

1: Si
2: No

Selection: 1
Â¿CÃºal es tu nombre de usuario registrado en Coursera (email)? maldo.jota@gmail.com
Â¿CÃºal es tu token de la tarea? rWv9o0ikIjoKylvk
Â¡El envÃ­o de la calificaciÃ³n fue satisfactorio!

| You nailed it! Good job!

////////////////////////////////////////////////////////////////////////////////

> library(swirl)

| Hi! Type swirl() when you are ready to begin.

Warning message:
package ‘swirl’ was built under R version 3.4.4
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use
| the same name as you did then. If you are new, call yourself
| something unique.

What shall I call you? maldojota

| Would you like to continue with one of these lessons?

1: programacion-estadistica-r Graficacion con ggplot2
2: No. Let me start something new.

Selection: 1

| Attempting to load lesson dependencies...

| Package ‘ggplot2’ loaded correctly!



| Con esto necesitarías 10 puntos en un mismo lugar para que se pinte
| un primer punto.

...

  |======================================                       |  63%
| Nota cómo si cambias el alpha de un 1/10 a un 1/100 puedes encontrar
| nuevos patrones que no eran claros cuando usabas un alpha más
| grande. ¡Inténtalo!

>
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use
| the same name as you did then. If you are new, call yourself
| something unique.

What shall I call you? maldojota

| Would you like to continue with one of these lessons?

1: programacion-estadistica-r Graficacion con ggplot2
2: No. Let me start something new.

Selection:
Enter an item from the menu, or 0 to exit
Selection: 1

| Attempting to load lesson dependencies...

| Package ‘ggplot2’ loaded correctly!



| Nota cómo si cambias el alpha de un 1/10 a un 1/100 puedes encontrar
| nuevos patrones que no eran claros cuando usabas un alpha más
| grande. ¡Inténtalo!

> k
Error: object 'k' not found
> qplot()

| Not quite right, but keep trying. Or, type info() for more options.

| Ingresa qplot(carat, price, data=diamonds, alpha=I(1/100)) en la
| línea de comandos.

> qplot(carat, price, data=diamonds, alpha=I(1/100))

| You're the best!

  |========================================                     |  66%
| size, es un atributo que indica el tamaño, por lo que si usas
| size=table te pintará los puntos de diferente tamaño. Ingresa
| qplot(carat, price, data=diamonds, size=table) en la línea de
| comandos.

> qplot(carat, price, data=diamonds, size=table)

| All that hard work is paying off!

  |==========================================                   |  69%
| Debes de saber que algunas variables se mapean mejor a ciertos
| atributos estéticos; por ejemplo, color y shape se mapean mejor a
| variables categóricas, mientras que size se mapea mejor a variables
| de tipo continuo.

...

  |============================================                 |  71%
| A veces la cantidad de datos puede hacer una gran diferencia y ya
| viste que puede usar alpha para cambiar la saturación mayor o menor
| dependiendo del número de puntos que tengas. Si esto no te ayuda
| entonces puedes tratar de subdividir los grupos de las variables que
| se forman en una sola variable con una técnica especial conocida
| como faceting.

...

  |=============================================                |  74%
| El atributo facets te permite crear una tabla donde puedes
| subdividir en grupos. Si quisieras ver cómo se comporta la variable
| carat contra la variable price y le pides que te haga el faceting
| por color, entonces por cada color de diamante te va graficando el
| carat contra el price (peso vs precio). Ingresa qplot(carat, price,
| data=diamonds, facets = color ~ .) en la línea de comandos.

> qplot(carat, price, data=diamonds, facets = color ~ .
+ )

| That's correct!

  |===============================================              |  77%
| Entonces puedes observar cómo se va comportando para cada uno de los
| colores de diamante. Esto te permite la comparación visual
| inmediata.

...

  |=================================================            |  80%
| Por último, el atributo geom de qplot() especifica el tipo de objeto
| que utilizará para graficar. El valor por defecto es "point"
| (punto); esto sólo si ’x’ y ‘y’ se encuentran especificados. Si sólo
| x se encuentra especificado el valor es "histogram" (histograma).

...

  |===================================================          |  83%
| Un posible valor para geom es "smooth", el cual ajusta una curva a
| los puntos que estas especificando, además de que te dibuja el error
| estándar de esa curva. Ingresa qplot(carat, price, data=diamonds,
| geom = c("point", "smooth")) en la línea de comandos.

> qplot(carat, price, data=diamonds, geom = c("point", "smooth"))
`geom_smooth()` using method = 'gam'
`geom_smooth()` using method = 'gam'

| You are doing so well!

  |====================================================         |  86%
| Una característica de "smooth" es que puedes especificar el tipo de
| ajuste que quieres para la curva.

...

  |======================================================       |  89%
| Otro valor posible es "jitter", el cual permite analizar en cajas
| cómo se están dispersando los puntos, dependiendo de las variables
| que quieras observar. Ingresa qplot(color, price/carat,
| data=diamonds, geom = "jitter") en la línea de comandos.

> qplot(color, price/carat,data=diamonds, geom = "jitter")

| Keep working like that and you'll get there!

  |========================================================     |  91%
| Si usas geom="boxplot" te graficará una gráfica de caja, donde
| puedes observar la distribución de tus datos por la categoría que
| quieras observar. Ingresa qplot(color, price/carat, data=diamonds,
| geom = "boxplot") en la línea de comandos.

> qplot(color, price/carat, data=diamonds, geom = "boxplot")

| You are quite good my friend!

  |==========================================================   |  94%
| Otros dos valores importantes que puede tomar geom son "line" y
| "path".

...

  |===========================================================  |  97%
| Actualmente, ggplot2 no puede ser usado para crear gráficas 3D.

...

  |=============================================================| 100%
| Has concluido la lección. ¿Te gustaría que se le notificará a
| Coursera que has completado esta lección?

1: No
2: Si

Selection: 2
Â¿CÃºal es tu nombre de usuario registrado en Coursera (email)? maldo.jota@gmail.com
Â¿CÃºal es tu token de la tarea? lwiAABgTop7aUTjo
Â¡El envÃ­o de la calificaciÃ³n fue satisfactorio!

| You nailed it! Good job!

////////////////////////////////////////////////////////////////////////////////

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Obtener Ayuda
 2: Objetos Tipos de Datos y Operaciones Basicas
 3: Subconjuntos de Datos
 4: Leer y escribir Datos
 5: Funciones
 6: Funciones apply
 7: Graficacion
 8: Parametros en el Sistema de Graficos
 9: Colores en el Sistema de Graficos
10: Graficacion con texto y notacion matematica
11: Creacion de Graficas en 3D
12: Expresiones regulares
13: Graficacion con ggplot2
14: Simulacion

Selection: 14
  |                                                             |   0%

| Esta lección asume que tienes familiaridad con algunas
| distribuciones de probabilidad. Aun si no tienes ninguna experiencia
| con estos conceptos, serás capaz de completar esta lección y
| entender las ideas generales.

...

  |==                                                           |   4%
| R contiene por defecto muchas distribuciones de probabilidad. Por
| ejemplo, si ingresas ?Normal, obtendrás información acerca de la
| distribución normal.

> ?Normal

| You got it!

  |====                                                         |   7%
| Usualmente cada distribución tendrá 4 funciones de la forma prefijo
| + apodo_distribucion. Cada prefijo indica: r - la función para
| generar números aleatorios, p - la función de distribución, d - la
| función de densidad, q - la función que te da cuantiles.

...

  |=======                                                      |  11%
| A todas estas funciones les puedes especificar la media y la
| varianza de la distribución.

...

  |=========                                                    |  14%
| En general, la primera letra de la función determina qué información
| obtendrás acerca de la distribución y luego el apodo_distribución
| sigue directamente.

...

  |===========                                                  |  18%
| Por ejemplo, si quisieras la función de densidad de la distribución
| Poisson usas dpois(). A continuación se muestran algunas
| distribuciones útiles.

Error: File swirl_temp/distributions.txt does not exist.
In addition: Warning message:
In file.copy(loc, "swirl_temp", overwrite = TRUE) :
  problem copying C:\Users\Juan_Maldonado\Documents\R\win-library\3.4\swirl\Courses\programacion-estadistica-r\Simulacion\distributions.txt to swirl_temp\distributions.txt: No such file or directory

| Leaving swirl now. Type swirl() to resume.

> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use
| the same name as you did then. If you are new, call yourself
| something unique.

What shall I call you? maldojota

| Would you like to continue with one of these lessons?

1: programacion-estadistica-r Simulacion
2: No. Let me start something new.

Selection: 1


| Por ejemplo, si quisieras la función de densidad de la distribución
| Poisson usas dpois(). A continuación se muestran algunas
| distribuciones útiles.

(Se ha copiado el archivo distributions.txt a la ruta C:/Users/Juan Maldonado/Documents/swirl_temp/distributions.txt ).
...

  |=============                                                |  21%
| Para obtener una lista completa de las distribuciones disponibles en
| R, ingresa help(Distributions) en la línea de comandos.

warning messages from top-level task callback 'mini'
Warning message:
In file.copy(loc, "swirl_temp", overwrite = TRUE) :
  problem copying C:\Users\Juan_Maldonado\Documents\R\win-library\3.4\swirl\Courses\programacion-estadistica-r\Simulacion\distributions.txt to swirl_temp\distributions.txt: No such file or directory
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use
| the same name as you did then. If you are new, call yourself
| something unique.

What shall I call you? maldojota

| Would you like to continue with one of these lessons?

1: programacion-estadistica-r Simulacion
2: No. Let me start something new.

Selection: 1
(Se ha copiado el archivo distributions.txt a la ruta C:/Users/Juan Maldonado/Documents/swirl_temp/distributions.txt ).


| Para obtener una lista completa de las distribuciones disponibles en
| R, ingresa help(Distributions) en la línea de comandos.

warning messages from top-level task callback 'mini'
Warning message:
In file.copy(loc, "swirl_temp", overwrite = TRUE) :
  problem copying C:\Users\Juan_Maldonado\Documents\R\win-library\3.4\swirl\Courses\programacion-estadistica-r\Simulacion\distributions.txt to swirl_temp\distributions.txt: No such file or directory
> help(Distributions)

| Excellent job!

  |===============                                              |  25%
| Es importante que revises que las funciones definan la distribución
| de la manera que tú esperas.

...

  |=================                                            |  29%
| Ahora verás cómo estas funciones te pueden ayudar para resolver un
| problema de simulación.

...

  |====================                                         |  32%
| Supón que quisieras encontrar la probabilidad de tener al menos 5
| caras al lanzar 7 veces una moneda justa.

...

  |======================                                       |  36%
| Recuerda que el lanzamiento de una moneda puede ser modelado por una
| variable aleatoria bernoulli.

...

  |========================                                     |  39%
| Es decir, donde p es la probabilidad de éxito; en este caso que
| caiga una cara, por lo que 1-p es la probabilidad de fracaso, es
| decir, que no caiga cara.

...

  |==========================                                   |  43%
| Y ahora puedes usar una variable aleatoria binomial que te dice el
| número de éxitos en n repeticiones de experimentos bernoulli. Esta
| variable aleatoria la puedes modelar con la función rbinom(). No
| olvides que si n=1 el experimento que estarás observando es el
| lanzamiento de una moneda (el caso más simple).

...

  |============================                                 |  46%
| En este caso puedes usar n=7 que son los 7 lanzamientos de la
| moneda.

...

  |==============================                               |  50%
| Ahora vas a generar esos números aleatorios usando la función
| rbinom(). Antes que nada ingresa ?rbinom en la línea de comandos
| para conocer su uso.

> ?rbinom()

| Almost! Try again. Or, type info() for more options.

> ?rbinom

| Perseverance, that's the answer.

  |=================================                            |  54%
| Como te podrás dar cuenta rbinom() se encuentra definida así:
| rbinom(n, size, prob), donde n indica el número de veces que se va a
| llevar a cabo el experimento. size dice el número de intentos; en
| este caso el número de lanzamientos que se van a llevar a cabo. Y
| prob indica la probabilidad de éxito en cada intento; en este caso
| que caiga cara.

...

  |===================================                          |  57%
| Si quisieras llevar a cabo este experimento una única vez, es decir,
| lanzar 7 veces una moneda con probabilidad 1/2 de éxito (es decir,
| que la moneda sea justa), deberás llamar a rbinom() de la siguiente
| manera: ingresa rbinom(1, 7, 0.5) en la línea de comandos.

> rbinom(1, 7, 0.5)
[1] 5

| You nailed it! Good job!

  |=====================================                        |  61%
| El resultado que obtuviste sólo te indica el número de éxitos que
| obtuviste en un único experimento, es decir, el número de caras que
| salieron.

...

  |=======================================                      |  64%
| Si quisieras sacar la proporción de éxitos que tendrías, habría que
| llevar a cabo este experimento una gran cantidad de veces.

...

  |=========================================                    |  68%
| Con R lo puedes justificar de manera intuitiva, aplicando este
| experimento muchas veces. En este caso repite el experimento 100 000
| veces y guárdalo en la variable 'resultado'.

>
> resultado <- rbinom(1, 100000, 0.5)

| Not exactly. Give it another go. Or, type info() for more options.

| Ingresa resultado <- rbinom(100000, 7, 0.5) en la línea de comandos
| para repetir 100 000 veces el experimento.

> resultado <- rbinom(100000, 7, 0.5)

| You're the best!

  |============================================                 |  71%
| Como ya te podrás imaginar, 'resultado' contiene el número de caras
| que salieron por cada experimento; en este caso 100 000. Ingresa
| tail(resultado) para conocer el resultado de los últimos 6
| experimentos.

> tail(resultado)
[1] 4 3 5 3 2 4

| Excellent job!

  |==============================================               |  75%
| Una vez teniendo los resultados de aplicar este experimento 100 000
| veces, puedes encontrar cuántos de esos experimentos tuvieron 5
| veces o más éxito. Ingresa tail(resultado > 5) en la línea de
| comandos.

> tail(resultado > 5)
[1] FALSE FALSE FALSE FALSE FALSE FALSE

| That's a job well done!

  |================================================             |  79%
| Teniendo este vector ahora puedes encontrar la proporción de
| verdaderos contra falsos sacando la media. Ingresa mean(resultado >
| 5) en la línea de comandos.

> mean(resultado > 5)
[1] 0.06307

| Great job!

  |==================================================           |  82%
| Con esto has encontrado la probabilidad de tener al menos 5 caras al
| lanzar 7 veces una moneda justa.

...

  |====================================================         |  86%
| Te preguntarás cómo sacaste la media de un vector de valores
| lógicos; recuerda que esto es posible debido a la coerción.

...

  |======================================================       |  89%
| Por último, es posible que desees que tus resultados sean
| replicables. La función set.seed() te permite establecer el punto de
| inicio en la generación de números aleatorios. Ingresa ?set.seed en
| la línea de comandos.

> ?set.seed

| That's a job well done!

  |=========================================================    |  93%
| Como verás, si estableces la misma semilla antes de generar números
| Aleatorios, siempre obtendrás los mismos números aleatorios.

...

  |===========================================================  |  96%
| Ten en cuenta que no siempre es lo que puedas necesitar.

...

  |=============================================================| 100%
| Has concluido la lección. ¿Te gustaría que se le notificará a
| Coursera que has completado esta lección?

1: Si
2: No

Selection: 1
Â¿CÃºal es tu nombre de usuario registrado en Coursera (email)? maldo.jota@♦gmail.com
Â¿CÃºal es tu token de la tarea? ApNnMemprMvlKHrg
El envÃ­o de la calificaciÃ³n fallÃ³.
Presiona ESC si deseas salir de la lecciÃ³n
y subir tu calificaciÃ³n mÃ¡s tarde.

| Almost! Try again.

|

1: No
2: Si

Selection: 2
Â¿CÃºal es tu nombre de usuario registrado en Coursera (email)? maldo.jota@gmail.com
Â¿CÃºal es tu token de la tarea? ApNnMemprMvlKHrg
Â¡El envÃ­o de la calificaciÃ³n fue satisfactorio!

| Perseverance, that's the answer.

///////////////////////////////////////////////////////////////////////////////////
